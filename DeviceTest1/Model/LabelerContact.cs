/* 
 * FDB Device Services
 *
 * Web API for accessing medical device information
 *
 * OpenAPI spec version: 1.03
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace DeviceSample.Model
{
    /// <summary>
    /// Returns the contact information for the labeler of the device, if it exists; this data is not validated
    /// </summary>
    [DataContract]
    public partial class LabelerContact :  IEquatable<LabelerContact>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LabelerContact" /> class.
        /// </summary>
        /// <param name="LabelerEmail">Returns the LabelerEmail.</param>
        /// <param name="LabelerPhone">Returns the LabelerPhone.</param>
        /// <param name="LabelerPhoneExtension">Returns the LabelerPhoneExtension.</param>
        public LabelerContact(string LabelerEmail = null, string LabelerPhone = null, string LabelerPhoneExtension = null)
        {
            this.LabelerEmail = LabelerEmail;
            this.LabelerPhone = LabelerPhone;
            this.LabelerPhoneExtension = LabelerPhoneExtension;
        }
        
        /// <summary>
        /// Returns the LabelerEmail
        /// </summary>
        /// <value>Returns the LabelerEmail</value>
        [DataMember(Name="LabelerEmail", EmitDefaultValue=false)]
        public string LabelerEmail { get; set; }
        /// <summary>
        /// Returns the LabelerPhone
        /// </summary>
        /// <value>Returns the LabelerPhone</value>
        [DataMember(Name="LabelerPhone", EmitDefaultValue=false)]
        public string LabelerPhone { get; set; }
        /// <summary>
        /// Returns the LabelerPhoneExtension
        /// </summary>
        /// <value>Returns the LabelerPhoneExtension</value>
        [DataMember(Name="LabelerPhoneExtension", EmitDefaultValue=false)]
        public string LabelerPhoneExtension { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LabelerContact {\n");
            sb.Append("  LabelerEmail: ").Append(LabelerEmail).Append("\n");
            sb.Append("  LabelerPhone: ").Append(LabelerPhone).Append("\n");
            sb.Append("  LabelerPhoneExtension: ").Append(LabelerPhoneExtension).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LabelerContact);
        }

        /// <summary>
        /// Returns true if LabelerContact instances are equal
        /// </summary>
        /// <param name="other">Instance of LabelerContact to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LabelerContact other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.LabelerEmail == other.LabelerEmail ||
                    this.LabelerEmail != null &&
                    this.LabelerEmail.Equals(other.LabelerEmail)
                ) && 
                (
                    this.LabelerPhone == other.LabelerPhone ||
                    this.LabelerPhone != null &&
                    this.LabelerPhone.Equals(other.LabelerPhone)
                ) && 
                (
                    this.LabelerPhoneExtension == other.LabelerPhoneExtension ||
                    this.LabelerPhoneExtension != null &&
                    this.LabelerPhoneExtension.Equals(other.LabelerPhoneExtension)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.LabelerEmail != null)
                    hash = hash * 59 + this.LabelerEmail.GetHashCode();
                if (this.LabelerPhone != null)
                    hash = hash * 59 + this.LabelerPhone.GetHashCode();
                if (this.LabelerPhoneExtension != null)
                    hash = hash * 59 + this.LabelerPhoneExtension.GetHashCode();
                return hash;
            }
        }
    }

}
