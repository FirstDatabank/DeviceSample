/* 
 * FDB Device Services
 *
 * Web API for accessing medical device information
 *
 * OpenAPI spec version: 1.05
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace DeviceSample.Model
{
    /// <summary>
    /// Returns the external package identifier information for the package
    /// </summary>
    [DataContract]
    public partial class PackageIdentifier : IEquatable<PackageIdentifier>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PackageIdentifier" /> class.
        /// </summary>
        /// <param name="ExternalPackageId">Returns the external package identifier.</param>
        /// <param name="ExternalPackageIdType">Returns the type of external package identifier; e.g. GTIN, HIBC, Catalog Number.</param>
        /// <param name="ExternalPackageIdDesignatorAgency">Returns the designator agency of external package identifier; e.g. GSI, HIBCC, Manufacturer.</param>
        public PackageIdentifier(string ExternalPackageId = default(string), string ExternalPackageIdType = default(string), string ExternalPackageIdDesignatorAgency = default(string))
        {
            this.ExternalPackageId = ExternalPackageId;
            this.ExternalPackageIdType = ExternalPackageIdType;
            this.ExternalPackageIdDesignatorAgency = ExternalPackageIdDesignatorAgency;
        }

        /// <summary>
        /// Returns the external package identifier
        /// </summary>
        /// <value>Returns the external package identifier</value>
        [DataMember(Name = "ExternalPackageId", EmitDefaultValue = false)]
        public string ExternalPackageId { get; set; }
        /// <summary>
        /// Returns the type of external package identifier; e.g. GTIN, HIBC, Catalog Number
        /// </summary>
        /// <value>Returns the type of external package identifier; e.g. GTIN, HIBC, Catalog Number</value>
        [DataMember(Name = "ExternalPackageIdType", EmitDefaultValue = false)]
        public string ExternalPackageIdType { get; set; }
        /// <summary>
        /// Returns the designator agency of external package identifier; e.g. GSI, HIBCC, Manufacturer
        /// </summary>
        /// <value>Returns the designator agency of external package identifier; e.g. GSI, HIBCC, Manufacturer</value>
        [DataMember(Name = "ExternalPackageIdDesignatorAgency", EmitDefaultValue = false)]
        public string ExternalPackageIdDesignatorAgency { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PackageIdentifier {\n");
            sb.Append("  ExternalPackageId: ").Append(ExternalPackageId).Append("\n");
            sb.Append("  ExternalPackageIdType: ").Append(ExternalPackageIdType).Append("\n");
            sb.Append("  ExternalPackageIdDesignatorAgency: ").Append(ExternalPackageIdDesignatorAgency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PackageIdentifier);
        }

        /// <summary>
        /// Returns true if PackageIdentifier instances are equal
        /// </summary>
        /// <param name="other">Instance of PackageIdentifier to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PackageIdentifier other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return
                (
                    this.ExternalPackageId == other.ExternalPackageId ||
                    this.ExternalPackageId != null &&
                    this.ExternalPackageId.Equals(other.ExternalPackageId)
                ) &&
                (
                    this.ExternalPackageIdType == other.ExternalPackageIdType ||
                    this.ExternalPackageIdType != null &&
                    this.ExternalPackageIdType.Equals(other.ExternalPackageIdType)
                ) &&
                (
                    this.ExternalPackageIdDesignatorAgency == other.ExternalPackageIdDesignatorAgency ||
                    this.ExternalPackageIdDesignatorAgency != null &&
                    this.ExternalPackageIdDesignatorAgency.Equals(other.ExternalPackageIdDesignatorAgency)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ExternalPackageId != null)
                    hash = hash * 59 + this.ExternalPackageId.GetHashCode();
                if (this.ExternalPackageIdType != null)
                    hash = hash * 59 + this.ExternalPackageIdType.GetHashCode();
                if (this.ExternalPackageIdDesignatorAgency != null)
                    hash = hash * 59 + this.ExternalPackageIdDesignatorAgency.GetHashCode();
                return hash;
            }
        }

    }

}
