/* 
 * FDB Device Services
 *
 * Web API for accessing medical device information
 *
 * OpenAPI spec version: 1.05
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace DeviceSample.Model
{
    /// <summary>
    /// Returns the device identifiers from various sources
    /// </summary>
    [DataContract]
    public partial class DeviceIdentifier : IEquatable<DeviceIdentifier>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceIdentifier" /> class.
        /// </summary>
        /// <param name="ExternalDeviceId">Returns the external identifier.</param>
        /// <param name="ExternalDeviceIdType">Returns the type of the external identifier. Examples - GTIN, HIBC, UPC, ISBT 128, UPN, NHRIC, NDC-NHRIC, NDC, PIN.</param>
        /// <param name="ExternalDeviceIdDesignatorAgency">Returns the agency the identifier is from. Examples - FDA, GS1, HIBCC, ICCBBA, Manufacturer, NCPDP.</param>
        /// <param name="ExternalDeviceIdDesignator">Returns the designator of the device identifier. Examples - Primary, Secondary, Unspecified, Direct Marketing, Package, Unit Of Use.</param>
        public DeviceIdentifier(string ExternalDeviceId = default(string), string ExternalDeviceIdType = default(string), string ExternalDeviceIdDesignatorAgency = default(string), string ExternalDeviceIdDesignator = default(string))
        {
            this.ExternalDeviceId = ExternalDeviceId;
            this.ExternalDeviceIdType = ExternalDeviceIdType;
            this.ExternalDeviceIdDesignatorAgency = ExternalDeviceIdDesignatorAgency;
            this.ExternalDeviceIdDesignator = ExternalDeviceIdDesignator;
        }

        /// <summary>
        /// Returns the external identifier
        /// </summary>
        /// <value>Returns the external identifier</value>
        [DataMember(Name = "ExternalDeviceId", EmitDefaultValue = false)]
        public string ExternalDeviceId { get; set; }
        /// <summary>
        /// Returns the type of the external identifier. Examples - GTIN, HIBC, UPC, ISBT 128, UPN, NHRIC, NDC-NHRIC, NDC, PIN
        /// </summary>
        /// <value>Returns the type of the external identifier. Examples - GTIN, HIBC, UPC, ISBT 128, UPN, NHRIC, NDC-NHRIC, NDC, PIN</value>
        [DataMember(Name = "ExternalDeviceIdType", EmitDefaultValue = false)]
        public string ExternalDeviceIdType { get; set; }
        /// <summary>
        /// Returns the agency the identifier is from. Examples - FDA, GS1, HIBCC, ICCBBA, Manufacturer, NCPDP
        /// </summary>
        /// <value>Returns the agency the identifier is from. Examples - FDA, GS1, HIBCC, ICCBBA, Manufacturer, NCPDP</value>
        [DataMember(Name = "ExternalDeviceIdDesignatorAgency", EmitDefaultValue = false)]
        public string ExternalDeviceIdDesignatorAgency { get; set; }
        /// <summary>
        /// Returns the designator of the device identifier. Examples - Primary, Secondary, Unspecified, Direct Marketing, Package, Unit Of Use
        /// </summary>
        /// <value>Returns the designator of the device identifier. Examples - Primary, Secondary, Unspecified, Direct Marketing, Package, Unit Of Use</value>
        [DataMember(Name = "ExternalDeviceIdDesignator", EmitDefaultValue = false)]
        public string ExternalDeviceIdDesignator { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DeviceIdentifier {\n");
            sb.Append("  ExternalDeviceId: ").Append(ExternalDeviceId).Append("\n");
            sb.Append("  ExternalDeviceIdType: ").Append(ExternalDeviceIdType).Append("\n");
            sb.Append("  ExternalDeviceIdDesignatorAgency: ").Append(ExternalDeviceIdDesignatorAgency).Append("\n");
            sb.Append("  ExternalDeviceIdDesignator: ").Append(ExternalDeviceIdDesignator).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DeviceIdentifier);
        }

        /// <summary>
        /// Returns true if DeviceIdentifier instances are equal
        /// </summary>
        /// <param name="other">Instance of DeviceIdentifier to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeviceIdentifier other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return
                (
                    this.ExternalDeviceId == other.ExternalDeviceId ||
                    this.ExternalDeviceId != null &&
                    this.ExternalDeviceId.Equals(other.ExternalDeviceId)
                ) &&
                (
                    this.ExternalDeviceIdType == other.ExternalDeviceIdType ||
                    this.ExternalDeviceIdType != null &&
                    this.ExternalDeviceIdType.Equals(other.ExternalDeviceIdType)
                ) &&
                (
                    this.ExternalDeviceIdDesignatorAgency == other.ExternalDeviceIdDesignatorAgency ||
                    this.ExternalDeviceIdDesignatorAgency != null &&
                    this.ExternalDeviceIdDesignatorAgency.Equals(other.ExternalDeviceIdDesignatorAgency)
                ) &&
                (
                    this.ExternalDeviceIdDesignator == other.ExternalDeviceIdDesignator ||
                    this.ExternalDeviceIdDesignator != null &&
                    this.ExternalDeviceIdDesignator.Equals(other.ExternalDeviceIdDesignator)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ExternalDeviceId != null)
                    hash = hash * 59 + this.ExternalDeviceId.GetHashCode();
                if (this.ExternalDeviceIdType != null)
                    hash = hash * 59 + this.ExternalDeviceIdType.GetHashCode();
                if (this.ExternalDeviceIdDesignatorAgency != null)
                    hash = hash * 59 + this.ExternalDeviceIdDesignatorAgency.GetHashCode();
                if (this.ExternalDeviceIdDesignator != null)
                    hash = hash * 59 + this.ExternalDeviceIdDesignator.GetHashCode();
                return hash;
            }
        }

    }

}
