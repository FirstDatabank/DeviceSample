/* 
 * FDB Prizm Services
 *
 * Web API for accessing medical device information
 *
 * OpenAPI spec version: 1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace DeviceSample.Model
{
    /// <summary>
    /// PackagingCompany
    /// </summary>
    [DataContract]
    public partial class PackagingCompany :  IEquatable<PackagingCompany>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PackagingCompany" /> class.
        /// </summary>
        /// <param name="PackagingCompanyId">PackagingCompanyId.</param>
        /// <param name="PackagingCompanyName">PackagingCompanyName.</param>
        /// <param name="PackagingCatalogNumber">PackagingCatalogNumber.</param>
        public PackagingCompany(int? PackagingCompanyId = default(int?), string PackagingCompanyName = default(string), string PackagingCatalogNumber = default(string))
        {
            this.PackagingCompanyId = PackagingCompanyId;
            this.PackagingCompanyName = PackagingCompanyName;
            this.PackagingCatalogNumber = PackagingCatalogNumber;
        }
        
        /// <summary>
        /// Gets or Sets PackagingCompanyId
        /// </summary>
        [DataMember(Name="PackagingCompanyId", EmitDefaultValue=false)]
        public int? PackagingCompanyId { get; set; }

        /// <summary>
        /// Gets or Sets PackagingCompanyName
        /// </summary>
        [DataMember(Name="PackagingCompanyName", EmitDefaultValue=false)]
        public string PackagingCompanyName { get; set; }

        /// <summary>
        /// Gets or Sets PackagingCatalogNumber
        /// </summary>
        [DataMember(Name="PackagingCatalogNumber", EmitDefaultValue=false)]
        public string PackagingCatalogNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PackagingCompany {\n");
            sb.Append("  PackagingCompanyId: ").Append(PackagingCompanyId).Append("\n");
            sb.Append("  PackagingCompanyName: ").Append(PackagingCompanyName).Append("\n");
            sb.Append("  PackagingCatalogNumber: ").Append(PackagingCatalogNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PackagingCompany);
        }

        /// <summary>
        /// Returns true if PackagingCompany instances are equal
        /// </summary>
        /// <param name="other">Instance of PackagingCompany to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PackagingCompany other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.PackagingCompanyId == other.PackagingCompanyId ||
                    this.PackagingCompanyId != null &&
                    this.PackagingCompanyId.Equals(other.PackagingCompanyId)
                ) && 
                (
                    this.PackagingCompanyName == other.PackagingCompanyName ||
                    this.PackagingCompanyName != null &&
                    this.PackagingCompanyName.Equals(other.PackagingCompanyName)
                ) && 
                (
                    this.PackagingCatalogNumber == other.PackagingCatalogNumber ||
                    this.PackagingCatalogNumber != null &&
                    this.PackagingCatalogNumber.Equals(other.PackagingCatalogNumber)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.PackagingCompanyId != null)
                    hash = hash * 59 + this.PackagingCompanyId.GetHashCode();
                if (this.PackagingCompanyName != null)
                    hash = hash * 59 + this.PackagingCompanyName.GetHashCode();
                if (this.PackagingCatalogNumber != null)
                    hash = hash * 59 + this.PackagingCatalogNumber.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
