/* 
 * FDB Prizm Services
 *
 * Web API for accessing medical device information
 *
 * OpenAPI spec version: 1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace DeviceSample.Model
{
    /// <summary>
    /// Company
    /// </summary>
    [DataContract]
    public partial class Company :  IEquatable<Company>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Company" /> class.
        /// </summary>
        /// <param name="CompanyId">CompanyId.</param>
        /// <param name="CompanyName">CompanyName.</param>
        /// <param name="CompanyNameShort">CompanyNameShort.</param>
        /// <param name="CompanyAliases">CompanyAliases.</param>
        public Company(int? CompanyId = default(int?), string CompanyName = default(string), string CompanyNameShort = default(string), List<CompanyAlias> CompanyAliases = default(List<CompanyAlias>))
        {
            this.CompanyId = CompanyId;
            this.CompanyName = CompanyName;
            this.CompanyNameShort = CompanyNameShort;
            this.CompanyAliases = CompanyAliases;
        }
        
        /// <summary>
        /// Gets or Sets CompanyId
        /// </summary>
        [DataMember(Name="CompanyId", EmitDefaultValue=false)]
        public int? CompanyId { get; set; }

        /// <summary>
        /// Gets or Sets CompanyName
        /// </summary>
        [DataMember(Name="CompanyName", EmitDefaultValue=false)]
        public string CompanyName { get; set; }

        /// <summary>
        /// Gets or Sets CompanyNameShort
        /// </summary>
        [DataMember(Name="CompanyNameShort", EmitDefaultValue=false)]
        public string CompanyNameShort { get; set; }

        /// <summary>
        /// Gets or Sets CompanyAliases
        /// </summary>
        [DataMember(Name="CompanyAliases", EmitDefaultValue=false)]
        public List<CompanyAlias> CompanyAliases { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Company {\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  CompanyNameShort: ").Append(CompanyNameShort).Append("\n");
            sb.Append("  CompanyAliases: ").Append(CompanyAliases).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Company);
        }

        /// <summary>
        /// Returns true if Company instances are equal
        /// </summary>
        /// <param name="other">Instance of Company to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Company other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CompanyId == other.CompanyId ||
                    this.CompanyId != null &&
                    this.CompanyId.Equals(other.CompanyId)
                ) && 
                (
                    this.CompanyName == other.CompanyName ||
                    this.CompanyName != null &&
                    this.CompanyName.Equals(other.CompanyName)
                ) && 
                (
                    this.CompanyNameShort == other.CompanyNameShort ||
                    this.CompanyNameShort != null &&
                    this.CompanyNameShort.Equals(other.CompanyNameShort)
                ) && 
                (
                    this.CompanyAliases == other.CompanyAliases ||
                    this.CompanyAliases != null &&
                    this.CompanyAliases.SequenceEqual(other.CompanyAliases)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CompanyId != null)
                    hash = hash * 59 + this.CompanyId.GetHashCode();
                if (this.CompanyName != null)
                    hash = hash * 59 + this.CompanyName.GetHashCode();
                if (this.CompanyNameShort != null)
                    hash = hash * 59 + this.CompanyNameShort.GetHashCode();
                if (this.CompanyAliases != null)
                    hash = hash * 59 + this.CompanyAliases.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
