/* 
 * FDB Device Services
 *
 * Web API for accessing medical device information
 *
 * OpenAPI spec version: 1.01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace DeviceSample.Model
{
    /// <summary>
    /// Contains elements that describe a device
    /// </summary>
    [DataContract]
    public partial class Device :  IEquatable<Device>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Device" /> class.
        /// </summary>
        /// <param name="FDBDeviceId">Returns the FDB identifier of the device.</param>
        /// <param name="StandardDeviceName">Returns a normalized name of the device using a descriptive text.</param>
        /// <param name="EnhancedDeviceName">Returns a more descriptive name for a device composed of the labeler name, brand name (if it exists), standard device name, relevant sizes and other characteristics.</param>
        /// <param name="BrandName">Returns the Labeler&#39;s Brand Name of the device, typically a trademarked name of the device or device grouping.</param>
        /// <param name="GUDIDBrandName">Returns the GUDID Brand Name of the device.</param>
        /// <param name="GUDIDDescription">Returns the GUDID Description of the device.</param>
        /// <param name="LabelerName">Returns a standardized manufacturer or vendor name of the device.</param>
        /// <param name="UDI_DI">Returns an identifier issued by GS1, HIBCC, or ICCBBA to uniquely identify the device.</param>
        /// <param name="UDIDISecondary">Returns a secondary identifier issued by GS1, HIBCC, or ICCBBA to uniquely identify the device.</param>
        /// <param name="GTIN14">Returns Global Trade Identification Number assigned by GS1 for the device.</param>
        /// <param name="HIBC">Returns Healthcare Industry Bar Code assigned by HIBCC for the device.</param>
        /// <param name="ISBT128">Returns the International Society of Blood Transfusion.128 code assigned by ICCBBA for the device.</param>
        /// <param name="DeviceIdentifiers">Returns a list of device identifiers.</param>
        /// <param name="GUDIDVersionModelNumber">Returns the GUDID version model number of the device.</param>
        /// <param name="VersionNumber">Returns the Labelers Version Number of the device.</param>
        /// <param name="ModelNumber">Returns the Labelers Model Number of the device.</param>
        /// <param name="CatalogNumber">Returns an identifier assigned by the Labeler for use in product catalogs, product ordering and/or labeling;  often referred to as an item number, product number or manufacturer number.</param>
        /// <param name="SizeInfo">Returns a list of clinical dimensions of the product.</param>
        /// <param name="BasePackageType">Returns the type of the base package.</param>
        /// <param name="BasePackageCount">Returns the number of individual devices in the base package.</param>
        /// <param name="PackageInfo">Returns the list of packages for the device.</param>
        /// <param name="DeviceCategories">Returns categorization information about the device.</param>
        public Device(int? FDBDeviceId = null, string StandardDeviceName = null, string EnhancedDeviceName = null, string BrandName = null, string GUDIDBrandName = null, string GUDIDDescription = null, string LabelerName = null, string UDI_DI = null, string UDIDISecondary = null, string GTIN14 = null, string HIBC = null, string ISBT128 = null, List<DeviceIdentifier> DeviceIdentifiers = null, string GUDIDVersionModelNumber = null, string VersionNumber = null, string ModelNumber = null, List<string> CatalogNumber = null, List<SizeInfo> SizeInfo = null, string BasePackageType = null, string BasePackageCount = null, List<PackageInfo> PackageInfo = null, List<DeviceCategory> DeviceCategories = null)
        {
            this.FDBDeviceId = FDBDeviceId;
            this.StandardDeviceName = StandardDeviceName;
            this.EnhancedDeviceName = EnhancedDeviceName;
            this.BrandName = BrandName;
            this.GUDIDBrandName = GUDIDBrandName;
            this.GUDIDDescription = GUDIDDescription;
            this.LabelerName = LabelerName;
            this.UDI_DI = UDI_DI;
            this.UDIDISecondary = UDIDISecondary;
            this.GTIN14 = GTIN14;
            this.HIBC = HIBC;
            this.ISBT128 = ISBT128;
            this.DeviceIdentifiers = DeviceIdentifiers;
            this.GUDIDVersionModelNumber = GUDIDVersionModelNumber;
            this.VersionNumber = VersionNumber;
            this.ModelNumber = ModelNumber;
            this.CatalogNumber = CatalogNumber;
            this.SizeInfo = SizeInfo;
            this.BasePackageType = BasePackageType;
            this.BasePackageCount = BasePackageCount;
            this.PackageInfo = PackageInfo;
            this.DeviceCategories = DeviceCategories;
        }
        
        /// <summary>
        /// Returns the FDB identifier of the device
        /// </summary>
        /// <value>Returns the FDB identifier of the device</value>
        [DataMember(Name="FDBDeviceId", EmitDefaultValue=false)]
        public int? FDBDeviceId { get; set; }
        /// <summary>
        /// Returns a normalized name of the device using a descriptive text
        /// </summary>
        /// <value>Returns a normalized name of the device using a descriptive text</value>
        [DataMember(Name="StandardDeviceName", EmitDefaultValue=false)]
        public string StandardDeviceName { get; set; }
        /// <summary>
        /// Returns a more descriptive name for a device composed of the labeler name, brand name (if it exists), standard device name, relevant sizes and other characteristics
        /// </summary>
        /// <value>Returns a more descriptive name for a device composed of the labeler name, brand name (if it exists), standard device name, relevant sizes and other characteristics</value>
        [DataMember(Name="EnhancedDeviceName", EmitDefaultValue=false)]
        public string EnhancedDeviceName { get; set; }
        /// <summary>
        /// Returns the Labeler&#39;s Brand Name of the device, typically a trademarked name of the device or device grouping
        /// </summary>
        /// <value>Returns the Labeler&#39;s Brand Name of the device, typically a trademarked name of the device or device grouping</value>
        [DataMember(Name="BrandName", EmitDefaultValue=false)]
        public string BrandName { get; set; }
        /// <summary>
        /// Returns the GUDID Brand Name of the device
        /// </summary>
        /// <value>Returns the GUDID Brand Name of the device</value>
        [DataMember(Name="GUDIDBrandName", EmitDefaultValue=false)]
        public string GUDIDBrandName { get; set; }
        /// <summary>
        /// Returns the GUDID Description of the device
        /// </summary>
        /// <value>Returns the GUDID Description of the device</value>
        [DataMember(Name="GUDIDDescription", EmitDefaultValue=false)]
        public string GUDIDDescription { get; set; }
        /// <summary>
        /// Returns a standardized manufacturer or vendor name of the device
        /// </summary>
        /// <value>Returns a standardized manufacturer or vendor name of the device</value>
        [DataMember(Name="LabelerName", EmitDefaultValue=false)]
        public string LabelerName { get; set; }
        /// <summary>
        /// Returns an identifier issued by GS1, HIBCC, or ICCBBA to uniquely identify the device
        /// </summary>
        /// <value>Returns an identifier issued by GS1, HIBCC, or ICCBBA to uniquely identify the device</value>
        [DataMember(Name="UDI_DI", EmitDefaultValue=false)]
        public string UDI_DI { get; set; }
        /// <summary>
        /// Returns a secondary identifier issued by GS1, HIBCC, or ICCBBA to uniquely identify the device
        /// </summary>
        /// <value>Returns a secondary identifier issued by GS1, HIBCC, or ICCBBA to uniquely identify the device</value>
        [DataMember(Name="UDI_DI_Secondary", EmitDefaultValue=false)]
        public string UDIDISecondary { get; set; }
        /// <summary>
        /// Returns Global Trade Identification Number assigned by GS1 for the device
        /// </summary>
        /// <value>Returns Global Trade Identification Number assigned by GS1 for the device</value>
        [DataMember(Name="GTIN_14", EmitDefaultValue=false)]
        public string GTIN14 { get; set; }
        /// <summary>
        /// Returns Healthcare Industry Bar Code assigned by HIBCC for the device
        /// </summary>
        /// <value>Returns Healthcare Industry Bar Code assigned by HIBCC for the device</value>
        [DataMember(Name="HIBC", EmitDefaultValue=false)]
        public string HIBC { get; set; }
        /// <summary>
        /// Returns the International Society of Blood Transfusion.128 code assigned by ICCBBA for the device
        /// </summary>
        /// <value>Returns the International Society of Blood Transfusion.128 code assigned by ICCBBA for the device</value>
        [DataMember(Name="ISBT_128", EmitDefaultValue=false)]
        public string ISBT128 { get; set; }
        /// <summary>
        /// Returns a list of device identifiers
        /// </summary>
        /// <value>Returns a list of device identifiers</value>
        [DataMember(Name="DeviceIdentifiers", EmitDefaultValue=false)]
        public List<DeviceIdentifier> DeviceIdentifiers { get; set; }
        /// <summary>
        /// Returns the GUDID version model number of the device
        /// </summary>
        /// <value>Returns the GUDID version model number of the device</value>
        [DataMember(Name="GUDIDVersionModelNumber", EmitDefaultValue=false)]
        public string GUDIDVersionModelNumber { get; set; }
        /// <summary>
        /// Returns the Labelers Version Number of the device
        /// </summary>
        /// <value>Returns the Labelers Version Number of the device</value>
        [DataMember(Name="VersionNumber", EmitDefaultValue=false)]
        public string VersionNumber { get; set; }
        /// <summary>
        /// Returns the Labelers Model Number of the device
        /// </summary>
        /// <value>Returns the Labelers Model Number of the device</value>
        [DataMember(Name="ModelNumber", EmitDefaultValue=false)]
        public string ModelNumber { get; set; }
        /// <summary>
        /// Returns an identifier assigned by the Labeler for use in product catalogs, product ordering and/or labeling;  often referred to as an item number, product number or manufacturer number
        /// </summary>
        /// <value>Returns an identifier assigned by the Labeler for use in product catalogs, product ordering and/or labeling;  often referred to as an item number, product number or manufacturer number</value>
        [DataMember(Name="CatalogNumber", EmitDefaultValue=false)]
        public List<string> CatalogNumber { get; set; }
        /// <summary>
        /// Returns a list of clinical dimensions of the product
        /// </summary>
        /// <value>Returns a list of clinical dimensions of the product</value>
        [DataMember(Name="SizeInfo", EmitDefaultValue=false)]
        public List<SizeInfo> SizeInfo { get; set; }
        /// <summary>
        /// Returns the type of the base package
        /// </summary>
        /// <value>Returns the type of the base package</value>
        [DataMember(Name="BasePackageType", EmitDefaultValue=false)]
        public string BasePackageType { get; set; }
        /// <summary>
        /// Returns the number of individual devices in the base package
        /// </summary>
        /// <value>Returns the number of individual devices in the base package</value>
        [DataMember(Name="BasePackageCount", EmitDefaultValue=false)]
        public string BasePackageCount { get; set; }
        /// <summary>
        /// Returns the list of packages for the device
        /// </summary>
        /// <value>Returns the list of packages for the device</value>
        [DataMember(Name="PackageInfo", EmitDefaultValue=false)]
        public List<PackageInfo> PackageInfo { get; set; }
        /// <summary>
        /// Returns categorization information about the device
        /// </summary>
        /// <value>Returns categorization information about the device</value>
        [DataMember(Name="DeviceCategories", EmitDefaultValue=false)]
        public List<DeviceCategory> DeviceCategories { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Device {\n");
            sb.Append("  FDBDeviceId: ").Append(FDBDeviceId).Append("\n");
            sb.Append("  StandardDeviceName: ").Append(StandardDeviceName).Append("\n");
            sb.Append("  EnhancedDeviceName: ").Append(EnhancedDeviceName).Append("\n");
            sb.Append("  BrandName: ").Append(BrandName).Append("\n");
            sb.Append("  GUDIDBrandName: ").Append(GUDIDBrandName).Append("\n");
            sb.Append("  GUDIDDescription: ").Append(GUDIDDescription).Append("\n");
            sb.Append("  LabelerName: ").Append(LabelerName).Append("\n");
            sb.Append("  UDI_DI: ").Append(UDI_DI).Append("\n");
            sb.Append("  UDIDISecondary: ").Append(UDIDISecondary).Append("\n");
            sb.Append("  GTIN14: ").Append(GTIN14).Append("\n");
            sb.Append("  HIBC: ").Append(HIBC).Append("\n");
            sb.Append("  ISBT128: ").Append(ISBT128).Append("\n");
            sb.Append("  DeviceIdentifiers: ").Append(DeviceIdentifiers).Append("\n");
            sb.Append("  GUDIDVersionModelNumber: ").Append(GUDIDVersionModelNumber).Append("\n");
            sb.Append("  VersionNumber: ").Append(VersionNumber).Append("\n");
            sb.Append("  ModelNumber: ").Append(ModelNumber).Append("\n");
            sb.Append("  CatalogNumber: ").Append(CatalogNumber).Append("\n");
            sb.Append("  SizeInfo: ").Append(SizeInfo).Append("\n");
            sb.Append("  BasePackageType: ").Append(BasePackageType).Append("\n");
            sb.Append("  BasePackageCount: ").Append(BasePackageCount).Append("\n");
            sb.Append("  PackageInfo: ").Append(PackageInfo).Append("\n");
            sb.Append("  DeviceCategories: ").Append(DeviceCategories).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Device);
        }

        /// <summary>
        /// Returns true if Device instances are equal
        /// </summary>
        /// <param name="other">Instance of Device to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Device other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.FDBDeviceId == other.FDBDeviceId ||
                    this.FDBDeviceId != null &&
                    this.FDBDeviceId.Equals(other.FDBDeviceId)
                ) && 
                (
                    this.StandardDeviceName == other.StandardDeviceName ||
                    this.StandardDeviceName != null &&
                    this.StandardDeviceName.Equals(other.StandardDeviceName)
                ) && 
                (
                    this.EnhancedDeviceName == other.EnhancedDeviceName ||
                    this.EnhancedDeviceName != null &&
                    this.EnhancedDeviceName.Equals(other.EnhancedDeviceName)
                ) && 
                (
                    this.BrandName == other.BrandName ||
                    this.BrandName != null &&
                    this.BrandName.Equals(other.BrandName)
                ) && 
                (
                    this.GUDIDBrandName == other.GUDIDBrandName ||
                    this.GUDIDBrandName != null &&
                    this.GUDIDBrandName.Equals(other.GUDIDBrandName)
                ) && 
                (
                    this.GUDIDDescription == other.GUDIDDescription ||
                    this.GUDIDDescription != null &&
                    this.GUDIDDescription.Equals(other.GUDIDDescription)
                ) && 
                (
                    this.LabelerName == other.LabelerName ||
                    this.LabelerName != null &&
                    this.LabelerName.Equals(other.LabelerName)
                ) && 
                (
                    this.UDI_DI == other.UDI_DI ||
                    this.UDI_DI != null &&
                    this.UDI_DI.Equals(other.UDI_DI)
                ) && 
                (
                    this.UDIDISecondary == other.UDIDISecondary ||
                    this.UDIDISecondary != null &&
                    this.UDIDISecondary.Equals(other.UDIDISecondary)
                ) && 
                (
                    this.GTIN14 == other.GTIN14 ||
                    this.GTIN14 != null &&
                    this.GTIN14.Equals(other.GTIN14)
                ) && 
                (
                    this.HIBC == other.HIBC ||
                    this.HIBC != null &&
                    this.HIBC.Equals(other.HIBC)
                ) && 
                (
                    this.ISBT128 == other.ISBT128 ||
                    this.ISBT128 != null &&
                    this.ISBT128.Equals(other.ISBT128)
                ) && 
                (
                    this.DeviceIdentifiers == other.DeviceIdentifiers ||
                    this.DeviceIdentifiers != null &&
                    this.DeviceIdentifiers.SequenceEqual(other.DeviceIdentifiers)
                ) && 
                (
                    this.GUDIDVersionModelNumber == other.GUDIDVersionModelNumber ||
                    this.GUDIDVersionModelNumber != null &&
                    this.GUDIDVersionModelNumber.Equals(other.GUDIDVersionModelNumber)
                ) && 
                (
                    this.VersionNumber == other.VersionNumber ||
                    this.VersionNumber != null &&
                    this.VersionNumber.Equals(other.VersionNumber)
                ) && 
                (
                    this.ModelNumber == other.ModelNumber ||
                    this.ModelNumber != null &&
                    this.ModelNumber.Equals(other.ModelNumber)
                ) && 
                (
                    this.CatalogNumber == other.CatalogNumber ||
                    this.CatalogNumber != null &&
                    this.CatalogNumber.SequenceEqual(other.CatalogNumber)
                ) && 
                (
                    this.SizeInfo == other.SizeInfo ||
                    this.SizeInfo != null &&
                    this.SizeInfo.SequenceEqual(other.SizeInfo)
                ) && 
                (
                    this.BasePackageType == other.BasePackageType ||
                    this.BasePackageType != null &&
                    this.BasePackageType.Equals(other.BasePackageType)
                ) && 
                (
                    this.BasePackageCount == other.BasePackageCount ||
                    this.BasePackageCount != null &&
                    this.BasePackageCount.Equals(other.BasePackageCount)
                ) && 
                (
                    this.PackageInfo == other.PackageInfo ||
                    this.PackageInfo != null &&
                    this.PackageInfo.SequenceEqual(other.PackageInfo)
                ) && 
                (
                    this.DeviceCategories == other.DeviceCategories ||
                    this.DeviceCategories != null &&
                    this.DeviceCategories.SequenceEqual(other.DeviceCategories)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.FDBDeviceId != null)
                    hash = hash * 59 + this.FDBDeviceId.GetHashCode();
                if (this.StandardDeviceName != null)
                    hash = hash * 59 + this.StandardDeviceName.GetHashCode();
                if (this.EnhancedDeviceName != null)
                    hash = hash * 59 + this.EnhancedDeviceName.GetHashCode();
                if (this.BrandName != null)
                    hash = hash * 59 + this.BrandName.GetHashCode();
                if (this.GUDIDBrandName != null)
                    hash = hash * 59 + this.GUDIDBrandName.GetHashCode();
                if (this.GUDIDDescription != null)
                    hash = hash * 59 + this.GUDIDDescription.GetHashCode();
                if (this.LabelerName != null)
                    hash = hash * 59 + this.LabelerName.GetHashCode();
                if (this.UDI_DI != null)
                    hash = hash * 59 + this.UDI_DI.GetHashCode();
                if (this.UDIDISecondary != null)
                    hash = hash * 59 + this.UDIDISecondary.GetHashCode();
                if (this.GTIN14 != null)
                    hash = hash * 59 + this.GTIN14.GetHashCode();
                if (this.HIBC != null)
                    hash = hash * 59 + this.HIBC.GetHashCode();
                if (this.ISBT128 != null)
                    hash = hash * 59 + this.ISBT128.GetHashCode();
                if (this.DeviceIdentifiers != null)
                    hash = hash * 59 + this.DeviceIdentifiers.GetHashCode();
                if (this.GUDIDVersionModelNumber != null)
                    hash = hash * 59 + this.GUDIDVersionModelNumber.GetHashCode();
                if (this.VersionNumber != null)
                    hash = hash * 59 + this.VersionNumber.GetHashCode();
                if (this.ModelNumber != null)
                    hash = hash * 59 + this.ModelNumber.GetHashCode();
                if (this.CatalogNumber != null)
                    hash = hash * 59 + this.CatalogNumber.GetHashCode();
                if (this.SizeInfo != null)
                    hash = hash * 59 + this.SizeInfo.GetHashCode();
                if (this.BasePackageType != null)
                    hash = hash * 59 + this.BasePackageType.GetHashCode();
                if (this.BasePackageCount != null)
                    hash = hash * 59 + this.BasePackageCount.GetHashCode();
                if (this.PackageInfo != null)
                    hash = hash * 59 + this.PackageInfo.GetHashCode();
                if (this.DeviceCategories != null)
                    hash = hash * 59 + this.DeviceCategories.GetHashCode();
                return hash;
            }
        }
    }

}
