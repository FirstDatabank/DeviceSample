/* 
 * FDB Prizm Services
 *
 * Web API for accessing medical device information
 *
 * OpenAPI spec version: 1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace DeviceSample.Model
{
    /// <summary>
    /// Device
    /// </summary>
    [DataContract]
    public partial class Device :  IEquatable<Device>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Device" /> class.
        /// </summary>
        /// <param name="PrizmId">PrizmId.</param>
        /// <param name="StandardDeviceName">StandardDeviceName.</param>
        /// <param name="EnhancedDeviceName">EnhancedDeviceName.</param>
        /// <param name="EnhancedDeviceNameLong">EnhancedDeviceNameLong.</param>
        /// <param name="BrandName">BrandName.</param>
        /// <param name="GUDIDBrandName">GUDIDBrandName.</param>
        /// <param name="GUDIDDescription">GUDIDDescription.</param>
        /// <param name="UDIDeviceId">UDIDeviceId.</param>
        /// <param name="UDIDeviceIdSecondary">UDIDeviceIdSecondary.</param>
        /// <param name="UDIDeviceIdPublishDate">UDIDeviceIdPublishDate.</param>
        /// <param name="GTIN14">GTIN14.</param>
        /// <param name="HIBC">HIBC.</param>
        /// <param name="ISBT128">ISBT128.</param>
        /// <param name="GUDIDVersionModelNumber">GUDIDVersionModelNumber.</param>
        /// <param name="VersionNumber">VersionNumber.</param>
        /// <param name="ModelNumber">ModelNumber.</param>
        /// <param name="Company">Company.</param>
        /// <param name="Contacts">Contacts.</param>
        /// <param name="AssociatedCompanies">AssociatedCompanies.</param>
        /// <param name="CatalogNumbers">CatalogNumbers.</param>
        /// <param name="Sizes">Sizes.</param>
        /// <param name="Packages">Packages.</param>
        /// <param name="DeviceCategories">DeviceCategories.</param>
        /// <param name="StatusId">StatusId.</param>
        /// <param name="StatusDesc">StatusDesc.</param>
        /// <param name="LotNumberControlCode">LotNumberControlCode.</param>
        /// <param name="SerialNumberControlCode">SerialNumberControlCode.</param>
        /// <param name="ExpirationDateControlCode">ExpirationDateControlCode.</param>
        /// <param name="ManufacturedDateControlCode">ManufacturedDateControlCode.</param>
        /// <param name="DonationIdNumberControlCode">DonationIdNumberControlCode.</param>
        /// <param name="AlternativeDeviceNames">AlternativeDeviceNames.</param>
        /// <param name="PrizmPublishDate">PrizmPublishDate.</param>
        /// <param name="PrizmRevisionDate">PrizmRevisionDate.</param>
        /// <param name="Prescription">Prescription.</param>
        /// <param name="OverTheCounter">OverTheCounter.</param>
        /// <param name="DeviceIsAKit">DeviceIsAKit.</param>
        /// <param name="SingleUse">SingleUse.</param>
        /// <param name="PackagedSterile">PackagedSterile.</param>
        /// <param name="RequiresSterilizationPriorUse">RequiresSterilizationPriorUse.</param>
        /// <param name="SterilizationMethods">SterilizationMethods.</param>
        /// <param name="ContainsLatex">ContainsLatex.</param>
        /// <param name="CombinationProduct">CombinationProduct.</param>
        /// <param name="HumanCellTissue">HumanCellTissue.</param>
        /// <param name="HCPCS">HCPCS.</param>
        /// <param name="FDAProductCodeClassifications">FDAProductCodeClassifications.</param>
        /// <param name="MRISafety">MRISafety.</param>
        /// <param name="StorageHandling">StorageHandling.</param>
        /// <param name="DeviceProperties">DeviceProperties.</param>
        /// <param name="PrizmEndDate">PrizmEndDate.</param>
        public Device(int? PrizmId = default(int?), string StandardDeviceName = default(string), string EnhancedDeviceName = default(string), string EnhancedDeviceNameLong = default(string), string BrandName = default(string), string GUDIDBrandName = default(string), string GUDIDDescription = default(string), string UDIDeviceId = default(string), string UDIDeviceIdSecondary = default(string), string UDIDeviceIdPublishDate = default(string), string GTIN14 = default(string), string HIBC = default(string), string ISBT128 = default(string), string GUDIDVersionModelNumber = default(string), string VersionNumber = default(string), string ModelNumber = default(string), Company Company = default(Company), List<Contact> Contacts = default(List<Contact>), List<AssociatedCompany> AssociatedCompanies = default(List<AssociatedCompany>), List<CatalogNumberInfo> CatalogNumbers = default(List<CatalogNumberInfo>), List<Size> Sizes = default(List<Size>), List<Package> Packages = default(List<Package>), List<DeviceCategory> DeviceCategories = default(List<DeviceCategory>), int? StatusId = default(int?), string StatusDesc = default(string), int? LotNumberControlCode = default(int?), int? SerialNumberControlCode = default(int?), int? ExpirationDateControlCode = default(int?), int? ManufacturedDateControlCode = default(int?), int? DonationIdNumberControlCode = default(int?), List<AlternativeDeviceNameInfo> AlternativeDeviceNames = default(List<AlternativeDeviceNameInfo>), string PrizmPublishDate = default(string), string PrizmRevisionDate = default(string), bool? Prescription = default(bool?), bool? OverTheCounter = default(bool?), bool? DeviceIsAKit = default(bool?), bool? SingleUse = default(bool?), bool? PackagedSterile = default(bool?), bool? RequiresSterilizationPriorUse = default(bool?), List<SterilizationMethod> SterilizationMethods = default(List<SterilizationMethod>), bool? ContainsLatex = default(bool?), bool? CombinationProduct = default(bool?), bool? HumanCellTissue = default(bool?), List<HCPCSInfo> HCPCS = default(List<HCPCSInfo>), List<FDAProductCodeClassification> FDAProductCodeClassifications = default(List<FDAProductCodeClassification>), List<MRISafetyInfo> MRISafety = default(List<MRISafetyInfo>), List<StorageHandling> StorageHandling = default(List<StorageHandling>), List<DeviceProperty> DeviceProperties = default(List<DeviceProperty>), string PrizmEndDate = default(string))
        {
            this.PrizmId = PrizmId;
            this.StandardDeviceName = StandardDeviceName;
            this.EnhancedDeviceName = EnhancedDeviceName;
            this.EnhancedDeviceNameLong = EnhancedDeviceNameLong;
            this.BrandName = BrandName;
            this.GUDIDBrandName = GUDIDBrandName;
            this.GUDIDDescription = GUDIDDescription;
            this.UDIDeviceId = UDIDeviceId;
            this.UDIDeviceIdSecondary = UDIDeviceIdSecondary;
            this.UDIDeviceIdPublishDate = UDIDeviceIdPublishDate;
            this.GTIN14 = GTIN14;
            this.HIBC = HIBC;
            this.ISBT128 = ISBT128;
            this.GUDIDVersionModelNumber = GUDIDVersionModelNumber;
            this.VersionNumber = VersionNumber;
            this.ModelNumber = ModelNumber;
            this.Company = Company;
            this.Contacts = Contacts;
            this.AssociatedCompanies = AssociatedCompanies;
            this.CatalogNumbers = CatalogNumbers;
            this.Sizes = Sizes;
            this.Packages = Packages;
            this.DeviceCategories = DeviceCategories;
            this.StatusId = StatusId;
            this.StatusDesc = StatusDesc;
            this.LotNumberControlCode = LotNumberControlCode;
            this.SerialNumberControlCode = SerialNumberControlCode;
            this.ExpirationDateControlCode = ExpirationDateControlCode;
            this.ManufacturedDateControlCode = ManufacturedDateControlCode;
            this.DonationIdNumberControlCode = DonationIdNumberControlCode;
            this.AlternativeDeviceNames = AlternativeDeviceNames;
            this.PrizmPublishDate = PrizmPublishDate;
            this.PrizmRevisionDate = PrizmRevisionDate;
            this.Prescription = Prescription;
            this.OverTheCounter = OverTheCounter;
            this.DeviceIsAKit = DeviceIsAKit;
            this.SingleUse = SingleUse;
            this.PackagedSterile = PackagedSterile;
            this.RequiresSterilizationPriorUse = RequiresSterilizationPriorUse;
            this.SterilizationMethods = SterilizationMethods;
            this.ContainsLatex = ContainsLatex;
            this.CombinationProduct = CombinationProduct;
            this.HumanCellTissue = HumanCellTissue;
            this.HCPCS = HCPCS;
            this.FDAProductCodeClassifications = FDAProductCodeClassifications;
            this.MRISafety = MRISafety;
            this.StorageHandling = StorageHandling;
            this.DeviceProperties = DeviceProperties;
            this.PrizmEndDate = PrizmEndDate;
        }
        
        /// <summary>
        /// Gets or Sets PrizmId
        /// </summary>
        [DataMember(Name="PrizmId", EmitDefaultValue=false)]
        public int? PrizmId { get; set; }

        /// <summary>
        /// Gets or Sets StandardDeviceName
        /// </summary>
        [DataMember(Name="StandardDeviceName", EmitDefaultValue=false)]
        public string StandardDeviceName { get; set; }

        /// <summary>
        /// Gets or Sets EnhancedDeviceName
        /// </summary>
        [DataMember(Name="EnhancedDeviceName", EmitDefaultValue=false)]
        public string EnhancedDeviceName { get; set; }

        /// <summary>
        /// Gets or Sets EnhancedDeviceNameLong
        /// </summary>
        [DataMember(Name="EnhancedDeviceNameLong", EmitDefaultValue=false)]
        public string EnhancedDeviceNameLong { get; set; }

        /// <summary>
        /// Gets or Sets BrandName
        /// </summary>
        [DataMember(Name="BrandName", EmitDefaultValue=false)]
        public string BrandName { get; set; }

        /// <summary>
        /// Gets or Sets GUDIDBrandName
        /// </summary>
        [DataMember(Name="GUDIDBrandName", EmitDefaultValue=false)]
        public string GUDIDBrandName { get; set; }

        /// <summary>
        /// Gets or Sets GUDIDDescription
        /// </summary>
        [DataMember(Name="GUDIDDescription", EmitDefaultValue=false)]
        public string GUDIDDescription { get; set; }

        /// <summary>
        /// Gets or Sets UDIDeviceId
        /// </summary>
        [DataMember(Name="UDIDeviceId", EmitDefaultValue=false)]
        public string UDIDeviceId { get; set; }

        /// <summary>
        /// Gets or Sets UDIDeviceIdSecondary
        /// </summary>
        [DataMember(Name="UDIDeviceIdSecondary", EmitDefaultValue=false)]
        public string UDIDeviceIdSecondary { get; set; }

        /// <summary>
        /// Gets or Sets UDIDeviceIdPublishDate
        /// </summary>
        [DataMember(Name="UDIDeviceIdPublishDate", EmitDefaultValue=false)]
        public string UDIDeviceIdPublishDate { get; set; }

        /// <summary>
        /// Gets or Sets GTIN14
        /// </summary>
        [DataMember(Name="GTIN14", EmitDefaultValue=false)]
        public string GTIN14 { get; set; }

        /// <summary>
        /// Gets or Sets HIBC
        /// </summary>
        [DataMember(Name="HIBC", EmitDefaultValue=false)]
        public string HIBC { get; set; }

        /// <summary>
        /// Gets or Sets ISBT128
        /// </summary>
        [DataMember(Name="ISBT128", EmitDefaultValue=false)]
        public string ISBT128 { get; set; }

        /// <summary>
        /// Gets or Sets GUDIDVersionModelNumber
        /// </summary>
        [DataMember(Name="GUDIDVersionModelNumber", EmitDefaultValue=false)]
        public string GUDIDVersionModelNumber { get; set; }

        /// <summary>
        /// Gets or Sets VersionNumber
        /// </summary>
        [DataMember(Name="VersionNumber", EmitDefaultValue=false)]
        public string VersionNumber { get; set; }

        /// <summary>
        /// Gets or Sets ModelNumber
        /// </summary>
        [DataMember(Name="ModelNumber", EmitDefaultValue=false)]
        public string ModelNumber { get; set; }

        /// <summary>
        /// Gets or Sets Company
        /// </summary>
        [DataMember(Name="Company", EmitDefaultValue=false)]
        public Company Company { get; set; }

        /// <summary>
        /// Gets or Sets Contacts
        /// </summary>
        [DataMember(Name="Contacts", EmitDefaultValue=false)]
        public List<Contact> Contacts { get; set; }

        /// <summary>
        /// Gets or Sets AssociatedCompanies
        /// </summary>
        [DataMember(Name="AssociatedCompanies", EmitDefaultValue=false)]
        public List<AssociatedCompany> AssociatedCompanies { get; set; }

        /// <summary>
        /// Gets or Sets CatalogNumbers
        /// </summary>
        [DataMember(Name="CatalogNumbers", EmitDefaultValue=false)]
        public List<CatalogNumberInfo> CatalogNumbers { get; set; }

        /// <summary>
        /// Gets or Sets Sizes
        /// </summary>
        [DataMember(Name="Sizes", EmitDefaultValue=false)]
        public List<Size> Sizes { get; set; }

        /// <summary>
        /// Gets or Sets Packages
        /// </summary>
        [DataMember(Name="Packages", EmitDefaultValue=false)]
        public List<Package> Packages { get; set; }

        /// <summary>
        /// Gets or Sets DeviceCategories
        /// </summary>
        [DataMember(Name="DeviceCategories", EmitDefaultValue=false)]
        public List<DeviceCategory> DeviceCategories { get; set; }

        /// <summary>
        /// Gets or Sets StatusId
        /// </summary>
        [DataMember(Name="StatusId", EmitDefaultValue=false)]
        public int? StatusId { get; set; }

        /// <summary>
        /// Gets or Sets StatusDesc
        /// </summary>
        [DataMember(Name="StatusDesc", EmitDefaultValue=false)]
        public string StatusDesc { get; set; }

        /// <summary>
        /// Gets or Sets LotNumberControlCode
        /// </summary>
        [DataMember(Name="LotNumberControlCode", EmitDefaultValue=false)]
        public int? LotNumberControlCode { get; set; }

        /// <summary>
        /// Gets or Sets SerialNumberControlCode
        /// </summary>
        [DataMember(Name="SerialNumberControlCode", EmitDefaultValue=false)]
        public int? SerialNumberControlCode { get; set; }

        /// <summary>
        /// Gets or Sets ExpirationDateControlCode
        /// </summary>
        [DataMember(Name="ExpirationDateControlCode", EmitDefaultValue=false)]
        public int? ExpirationDateControlCode { get; set; }

        /// <summary>
        /// Gets or Sets ManufacturedDateControlCode
        /// </summary>
        [DataMember(Name="ManufacturedDateControlCode", EmitDefaultValue=false)]
        public int? ManufacturedDateControlCode { get; set; }

        /// <summary>
        /// Gets or Sets DonationIdNumberControlCode
        /// </summary>
        [DataMember(Name="DonationIdNumberControlCode", EmitDefaultValue=false)]
        public int? DonationIdNumberControlCode { get; set; }

        /// <summary>
        /// Gets or Sets AlternativeDeviceNames
        /// </summary>
        [DataMember(Name="AlternativeDeviceNames", EmitDefaultValue=false)]
        public List<AlternativeDeviceNameInfo> AlternativeDeviceNames { get; set; }

        /// <summary>
        /// Gets or Sets PrizmPublishDate
        /// </summary>
        [DataMember(Name="PrizmPublishDate", EmitDefaultValue=false)]
        public string PrizmPublishDate { get; set; }

        /// <summary>
        /// Gets or Sets PrizmRevisionDate
        /// </summary>
        [DataMember(Name="PrizmRevisionDate", EmitDefaultValue=false)]
        public string PrizmRevisionDate { get; set; }

        /// <summary>
        /// Gets or Sets Prescription
        /// </summary>
        [DataMember(Name="Prescription", EmitDefaultValue=false)]
        public bool? Prescription { get; set; }

        /// <summary>
        /// Gets or Sets OverTheCounter
        /// </summary>
        [DataMember(Name="OverTheCounter", EmitDefaultValue=false)]
        public bool? OverTheCounter { get; set; }

        /// <summary>
        /// Gets or Sets DeviceIsAKit
        /// </summary>
        [DataMember(Name="DeviceIsAKit", EmitDefaultValue=false)]
        public bool? DeviceIsAKit { get; set; }

        /// <summary>
        /// Gets or Sets SingleUse
        /// </summary>
        [DataMember(Name="SingleUse", EmitDefaultValue=false)]
        public bool? SingleUse { get; set; }

        /// <summary>
        /// Gets or Sets PackagedSterile
        /// </summary>
        [DataMember(Name="PackagedSterile", EmitDefaultValue=false)]
        public bool? PackagedSterile { get; set; }

        /// <summary>
        /// Gets or Sets RequiresSterilizationPriorUse
        /// </summary>
        [DataMember(Name="RequiresSterilizationPriorUse", EmitDefaultValue=false)]
        public bool? RequiresSterilizationPriorUse { get; set; }

        /// <summary>
        /// Gets or Sets SterilizationMethods
        /// </summary>
        [DataMember(Name="SterilizationMethods", EmitDefaultValue=false)]
        public List<SterilizationMethod> SterilizationMethods { get; set; }

        /// <summary>
        /// Gets or Sets ContainsLatex
        /// </summary>
        [DataMember(Name="ContainsLatex", EmitDefaultValue=false)]
        public bool? ContainsLatex { get; set; }

        /// <summary>
        /// Gets or Sets CombinationProduct
        /// </summary>
        [DataMember(Name="CombinationProduct", EmitDefaultValue=false)]
        public bool? CombinationProduct { get; set; }

        /// <summary>
        /// Gets or Sets HumanCellTissue
        /// </summary>
        [DataMember(Name="HumanCellTissue", EmitDefaultValue=false)]
        public bool? HumanCellTissue { get; set; }

        /// <summary>
        /// Gets or Sets HCPCS
        /// </summary>
        [DataMember(Name="HCPCS", EmitDefaultValue=false)]
        public List<HCPCSInfo> HCPCS { get; set; }

        /// <summary>
        /// Gets or Sets FDAProductCodeClassifications
        /// </summary>
        [DataMember(Name="FDAProductCodeClassifications", EmitDefaultValue=false)]
        public List<FDAProductCodeClassification> FDAProductCodeClassifications { get; set; }

        /// <summary>
        /// Gets or Sets MRISafety
        /// </summary>
        [DataMember(Name="MRISafety", EmitDefaultValue=false)]
        public List<MRISafetyInfo> MRISafety { get; set; }

        /// <summary>
        /// Gets or Sets StorageHandling
        /// </summary>
        [DataMember(Name="StorageHandling", EmitDefaultValue=false)]
        public List<StorageHandling> StorageHandling { get; set; }

        /// <summary>
        /// Gets or Sets DeviceProperties
        /// </summary>
        [DataMember(Name="DeviceProperties", EmitDefaultValue=false)]
        public List<DeviceProperty> DeviceProperties { get; set; }

        /// <summary>
        /// Gets or Sets PrizmEndDate
        /// </summary>
        [DataMember(Name="PrizmEndDate", EmitDefaultValue=false)]
        public string PrizmEndDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Device {\n");
            sb.Append("  PrizmId: ").Append(PrizmId).Append("\n");
            sb.Append("  StandardDeviceName: ").Append(StandardDeviceName).Append("\n");
            sb.Append("  EnhancedDeviceName: ").Append(EnhancedDeviceName).Append("\n");
            sb.Append("  EnhancedDeviceNameLong: ").Append(EnhancedDeviceNameLong).Append("\n");
            sb.Append("  BrandName: ").Append(BrandName).Append("\n");
            sb.Append("  GUDIDBrandName: ").Append(GUDIDBrandName).Append("\n");
            sb.Append("  GUDIDDescription: ").Append(GUDIDDescription).Append("\n");
            sb.Append("  UDIDeviceId: ").Append(UDIDeviceId).Append("\n");
            sb.Append("  UDIDeviceIdSecondary: ").Append(UDIDeviceIdSecondary).Append("\n");
            sb.Append("  UDIDeviceIdPublishDate: ").Append(UDIDeviceIdPublishDate).Append("\n");
            sb.Append("  GTIN14: ").Append(GTIN14).Append("\n");
            sb.Append("  HIBC: ").Append(HIBC).Append("\n");
            sb.Append("  ISBT128: ").Append(ISBT128).Append("\n");
            sb.Append("  GUDIDVersionModelNumber: ").Append(GUDIDVersionModelNumber).Append("\n");
            sb.Append("  VersionNumber: ").Append(VersionNumber).Append("\n");
            sb.Append("  ModelNumber: ").Append(ModelNumber).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  Contacts: ").Append(Contacts).Append("\n");
            sb.Append("  AssociatedCompanies: ").Append(AssociatedCompanies).Append("\n");
            sb.Append("  CatalogNumbers: ").Append(CatalogNumbers).Append("\n");
            sb.Append("  Sizes: ").Append(Sizes).Append("\n");
            sb.Append("  Packages: ").Append(Packages).Append("\n");
            sb.Append("  DeviceCategories: ").Append(DeviceCategories).Append("\n");
            sb.Append("  StatusId: ").Append(StatusId).Append("\n");
            sb.Append("  StatusDesc: ").Append(StatusDesc).Append("\n");
            sb.Append("  LotNumberControlCode: ").Append(LotNumberControlCode).Append("\n");
            sb.Append("  SerialNumberControlCode: ").Append(SerialNumberControlCode).Append("\n");
            sb.Append("  ExpirationDateControlCode: ").Append(ExpirationDateControlCode).Append("\n");
            sb.Append("  ManufacturedDateControlCode: ").Append(ManufacturedDateControlCode).Append("\n");
            sb.Append("  DonationIdNumberControlCode: ").Append(DonationIdNumberControlCode).Append("\n");
            sb.Append("  AlternativeDeviceNames: ").Append(AlternativeDeviceNames).Append("\n");
            sb.Append("  PrizmPublishDate: ").Append(PrizmPublishDate).Append("\n");
            sb.Append("  PrizmRevisionDate: ").Append(PrizmRevisionDate).Append("\n");
            sb.Append("  Prescription: ").Append(Prescription).Append("\n");
            sb.Append("  OverTheCounter: ").Append(OverTheCounter).Append("\n");
            sb.Append("  DeviceIsAKit: ").Append(DeviceIsAKit).Append("\n");
            sb.Append("  SingleUse: ").Append(SingleUse).Append("\n");
            sb.Append("  PackagedSterile: ").Append(PackagedSterile).Append("\n");
            sb.Append("  RequiresSterilizationPriorUse: ").Append(RequiresSterilizationPriorUse).Append("\n");
            sb.Append("  SterilizationMethods: ").Append(SterilizationMethods).Append("\n");
            sb.Append("  ContainsLatex: ").Append(ContainsLatex).Append("\n");
            sb.Append("  CombinationProduct: ").Append(CombinationProduct).Append("\n");
            sb.Append("  HumanCellTissue: ").Append(HumanCellTissue).Append("\n");
            sb.Append("  HCPCS: ").Append(HCPCS).Append("\n");
            sb.Append("  FDAProductCodeClassifications: ").Append(FDAProductCodeClassifications).Append("\n");
            sb.Append("  MRISafety: ").Append(MRISafety).Append("\n");
            sb.Append("  StorageHandling: ").Append(StorageHandling).Append("\n");
            sb.Append("  DeviceProperties: ").Append(DeviceProperties).Append("\n");
            sb.Append("  PrizmEndDate: ").Append(PrizmEndDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Device);
        }

        /// <summary>
        /// Returns true if Device instances are equal
        /// </summary>
        /// <param name="other">Instance of Device to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Device other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.PrizmId == other.PrizmId ||
                    this.PrizmId != null &&
                    this.PrizmId.Equals(other.PrizmId)
                ) && 
                (
                    this.StandardDeviceName == other.StandardDeviceName ||
                    this.StandardDeviceName != null &&
                    this.StandardDeviceName.Equals(other.StandardDeviceName)
                ) && 
                (
                    this.EnhancedDeviceName == other.EnhancedDeviceName ||
                    this.EnhancedDeviceName != null &&
                    this.EnhancedDeviceName.Equals(other.EnhancedDeviceName)
                ) && 
                (
                    this.EnhancedDeviceNameLong == other.EnhancedDeviceNameLong ||
                    this.EnhancedDeviceNameLong != null &&
                    this.EnhancedDeviceNameLong.Equals(other.EnhancedDeviceNameLong)
                ) && 
                (
                    this.BrandName == other.BrandName ||
                    this.BrandName != null &&
                    this.BrandName.Equals(other.BrandName)
                ) && 
                (
                    this.GUDIDBrandName == other.GUDIDBrandName ||
                    this.GUDIDBrandName != null &&
                    this.GUDIDBrandName.Equals(other.GUDIDBrandName)
                ) && 
                (
                    this.GUDIDDescription == other.GUDIDDescription ||
                    this.GUDIDDescription != null &&
                    this.GUDIDDescription.Equals(other.GUDIDDescription)
                ) && 
                (
                    this.UDIDeviceId == other.UDIDeviceId ||
                    this.UDIDeviceId != null &&
                    this.UDIDeviceId.Equals(other.UDIDeviceId)
                ) && 
                (
                    this.UDIDeviceIdSecondary == other.UDIDeviceIdSecondary ||
                    this.UDIDeviceIdSecondary != null &&
                    this.UDIDeviceIdSecondary.Equals(other.UDIDeviceIdSecondary)
                ) && 
                (
                    this.UDIDeviceIdPublishDate == other.UDIDeviceIdPublishDate ||
                    this.UDIDeviceIdPublishDate != null &&
                    this.UDIDeviceIdPublishDate.Equals(other.UDIDeviceIdPublishDate)
                ) && 
                (
                    this.GTIN14 == other.GTIN14 ||
                    this.GTIN14 != null &&
                    this.GTIN14.Equals(other.GTIN14)
                ) && 
                (
                    this.HIBC == other.HIBC ||
                    this.HIBC != null &&
                    this.HIBC.Equals(other.HIBC)
                ) && 
                (
                    this.ISBT128 == other.ISBT128 ||
                    this.ISBT128 != null &&
                    this.ISBT128.Equals(other.ISBT128)
                ) && 
                (
                    this.GUDIDVersionModelNumber == other.GUDIDVersionModelNumber ||
                    this.GUDIDVersionModelNumber != null &&
                    this.GUDIDVersionModelNumber.Equals(other.GUDIDVersionModelNumber)
                ) && 
                (
                    this.VersionNumber == other.VersionNumber ||
                    this.VersionNumber != null &&
                    this.VersionNumber.Equals(other.VersionNumber)
                ) && 
                (
                    this.ModelNumber == other.ModelNumber ||
                    this.ModelNumber != null &&
                    this.ModelNumber.Equals(other.ModelNumber)
                ) && 
                (
                    this.Company == other.Company ||
                    this.Company != null &&
                    this.Company.Equals(other.Company)
                ) && 
                (
                    this.Contacts == other.Contacts ||
                    this.Contacts != null &&
                    this.Contacts.SequenceEqual(other.Contacts)
                ) && 
                (
                    this.AssociatedCompanies == other.AssociatedCompanies ||
                    this.AssociatedCompanies != null &&
                    this.AssociatedCompanies.SequenceEqual(other.AssociatedCompanies)
                ) && 
                (
                    this.CatalogNumbers == other.CatalogNumbers ||
                    this.CatalogNumbers != null &&
                    this.CatalogNumbers.SequenceEqual(other.CatalogNumbers)
                ) && 
                (
                    this.Sizes == other.Sizes ||
                    this.Sizes != null &&
                    this.Sizes.SequenceEqual(other.Sizes)
                ) && 
                (
                    this.Packages == other.Packages ||
                    this.Packages != null &&
                    this.Packages.SequenceEqual(other.Packages)
                ) && 
                (
                    this.DeviceCategories == other.DeviceCategories ||
                    this.DeviceCategories != null &&
                    this.DeviceCategories.SequenceEqual(other.DeviceCategories)
                ) && 
                (
                    this.StatusId == other.StatusId ||
                    this.StatusId != null &&
                    this.StatusId.Equals(other.StatusId)
                ) && 
                (
                    this.StatusDesc == other.StatusDesc ||
                    this.StatusDesc != null &&
                    this.StatusDesc.Equals(other.StatusDesc)
                ) && 
                (
                    this.LotNumberControlCode == other.LotNumberControlCode ||
                    this.LotNumberControlCode != null &&
                    this.LotNumberControlCode.Equals(other.LotNumberControlCode)
                ) && 
                (
                    this.SerialNumberControlCode == other.SerialNumberControlCode ||
                    this.SerialNumberControlCode != null &&
                    this.SerialNumberControlCode.Equals(other.SerialNumberControlCode)
                ) && 
                (
                    this.ExpirationDateControlCode == other.ExpirationDateControlCode ||
                    this.ExpirationDateControlCode != null &&
                    this.ExpirationDateControlCode.Equals(other.ExpirationDateControlCode)
                ) && 
                (
                    this.ManufacturedDateControlCode == other.ManufacturedDateControlCode ||
                    this.ManufacturedDateControlCode != null &&
                    this.ManufacturedDateControlCode.Equals(other.ManufacturedDateControlCode)
                ) && 
                (
                    this.DonationIdNumberControlCode == other.DonationIdNumberControlCode ||
                    this.DonationIdNumberControlCode != null &&
                    this.DonationIdNumberControlCode.Equals(other.DonationIdNumberControlCode)
                ) && 
                (
                    this.AlternativeDeviceNames == other.AlternativeDeviceNames ||
                    this.AlternativeDeviceNames != null &&
                    this.AlternativeDeviceNames.SequenceEqual(other.AlternativeDeviceNames)
                ) && 
                (
                    this.PrizmPublishDate == other.PrizmPublishDate ||
                    this.PrizmPublishDate != null &&
                    this.PrizmPublishDate.Equals(other.PrizmPublishDate)
                ) && 
                (
                    this.PrizmRevisionDate == other.PrizmRevisionDate ||
                    this.PrizmRevisionDate != null &&
                    this.PrizmRevisionDate.Equals(other.PrizmRevisionDate)
                ) && 
                (
                    this.Prescription == other.Prescription ||
                    this.Prescription != null &&
                    this.Prescription.Equals(other.Prescription)
                ) && 
                (
                    this.OverTheCounter == other.OverTheCounter ||
                    this.OverTheCounter != null &&
                    this.OverTheCounter.Equals(other.OverTheCounter)
                ) && 
                (
                    this.DeviceIsAKit == other.DeviceIsAKit ||
                    this.DeviceIsAKit != null &&
                    this.DeviceIsAKit.Equals(other.DeviceIsAKit)
                ) && 
                (
                    this.SingleUse == other.SingleUse ||
                    this.SingleUse != null &&
                    this.SingleUse.Equals(other.SingleUse)
                ) && 
                (
                    this.PackagedSterile == other.PackagedSterile ||
                    this.PackagedSterile != null &&
                    this.PackagedSterile.Equals(other.PackagedSterile)
                ) && 
                (
                    this.RequiresSterilizationPriorUse == other.RequiresSterilizationPriorUse ||
                    this.RequiresSterilizationPriorUse != null &&
                    this.RequiresSterilizationPriorUse.Equals(other.RequiresSterilizationPriorUse)
                ) && 
                (
                    this.SterilizationMethods == other.SterilizationMethods ||
                    this.SterilizationMethods != null &&
                    this.SterilizationMethods.SequenceEqual(other.SterilizationMethods)
                ) && 
                (
                    this.ContainsLatex == other.ContainsLatex ||
                    this.ContainsLatex != null &&
                    this.ContainsLatex.Equals(other.ContainsLatex)
                ) && 
                (
                    this.CombinationProduct == other.CombinationProduct ||
                    this.CombinationProduct != null &&
                    this.CombinationProduct.Equals(other.CombinationProduct)
                ) && 
                (
                    this.HumanCellTissue == other.HumanCellTissue ||
                    this.HumanCellTissue != null &&
                    this.HumanCellTissue.Equals(other.HumanCellTissue)
                ) && 
                (
                    this.HCPCS == other.HCPCS ||
                    this.HCPCS != null &&
                    this.HCPCS.SequenceEqual(other.HCPCS)
                ) && 
                (
                    this.FDAProductCodeClassifications == other.FDAProductCodeClassifications ||
                    this.FDAProductCodeClassifications != null &&
                    this.FDAProductCodeClassifications.SequenceEqual(other.FDAProductCodeClassifications)
                ) && 
                (
                    this.MRISafety == other.MRISafety ||
                    this.MRISafety != null &&
                    this.MRISafety.SequenceEqual(other.MRISafety)
                ) && 
                (
                    this.StorageHandling == other.StorageHandling ||
                    this.StorageHandling != null &&
                    this.StorageHandling.SequenceEqual(other.StorageHandling)
                ) && 
                (
                    this.DeviceProperties == other.DeviceProperties ||
                    this.DeviceProperties != null &&
                    this.DeviceProperties.SequenceEqual(other.DeviceProperties)
                ) && 
                (
                    this.PrizmEndDate == other.PrizmEndDate ||
                    this.PrizmEndDate != null &&
                    this.PrizmEndDate.Equals(other.PrizmEndDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.PrizmId != null)
                    hash = hash * 59 + this.PrizmId.GetHashCode();
                if (this.StandardDeviceName != null)
                    hash = hash * 59 + this.StandardDeviceName.GetHashCode();
                if (this.EnhancedDeviceName != null)
                    hash = hash * 59 + this.EnhancedDeviceName.GetHashCode();
                if (this.EnhancedDeviceNameLong != null)
                    hash = hash * 59 + this.EnhancedDeviceNameLong.GetHashCode();
                if (this.BrandName != null)
                    hash = hash * 59 + this.BrandName.GetHashCode();
                if (this.GUDIDBrandName != null)
                    hash = hash * 59 + this.GUDIDBrandName.GetHashCode();
                if (this.GUDIDDescription != null)
                    hash = hash * 59 + this.GUDIDDescription.GetHashCode();
                if (this.UDIDeviceId != null)
                    hash = hash * 59 + this.UDIDeviceId.GetHashCode();
                if (this.UDIDeviceIdSecondary != null)
                    hash = hash * 59 + this.UDIDeviceIdSecondary.GetHashCode();
                if (this.UDIDeviceIdPublishDate != null)
                    hash = hash * 59 + this.UDIDeviceIdPublishDate.GetHashCode();
                if (this.GTIN14 != null)
                    hash = hash * 59 + this.GTIN14.GetHashCode();
                if (this.HIBC != null)
                    hash = hash * 59 + this.HIBC.GetHashCode();
                if (this.ISBT128 != null)
                    hash = hash * 59 + this.ISBT128.GetHashCode();
                if (this.GUDIDVersionModelNumber != null)
                    hash = hash * 59 + this.GUDIDVersionModelNumber.GetHashCode();
                if (this.VersionNumber != null)
                    hash = hash * 59 + this.VersionNumber.GetHashCode();
                if (this.ModelNumber != null)
                    hash = hash * 59 + this.ModelNumber.GetHashCode();
                if (this.Company != null)
                    hash = hash * 59 + this.Company.GetHashCode();
                if (this.Contacts != null)
                    hash = hash * 59 + this.Contacts.GetHashCode();
                if (this.AssociatedCompanies != null)
                    hash = hash * 59 + this.AssociatedCompanies.GetHashCode();
                if (this.CatalogNumbers != null)
                    hash = hash * 59 + this.CatalogNumbers.GetHashCode();
                if (this.Sizes != null)
                    hash = hash * 59 + this.Sizes.GetHashCode();
                if (this.Packages != null)
                    hash = hash * 59 + this.Packages.GetHashCode();
                if (this.DeviceCategories != null)
                    hash = hash * 59 + this.DeviceCategories.GetHashCode();
                if (this.StatusId != null)
                    hash = hash * 59 + this.StatusId.GetHashCode();
                if (this.StatusDesc != null)
                    hash = hash * 59 + this.StatusDesc.GetHashCode();
                if (this.LotNumberControlCode != null)
                    hash = hash * 59 + this.LotNumberControlCode.GetHashCode();
                if (this.SerialNumberControlCode != null)
                    hash = hash * 59 + this.SerialNumberControlCode.GetHashCode();
                if (this.ExpirationDateControlCode != null)
                    hash = hash * 59 + this.ExpirationDateControlCode.GetHashCode();
                if (this.ManufacturedDateControlCode != null)
                    hash = hash * 59 + this.ManufacturedDateControlCode.GetHashCode();
                if (this.DonationIdNumberControlCode != null)
                    hash = hash * 59 + this.DonationIdNumberControlCode.GetHashCode();
                if (this.AlternativeDeviceNames != null)
                    hash = hash * 59 + this.AlternativeDeviceNames.GetHashCode();
                if (this.PrizmPublishDate != null)
                    hash = hash * 59 + this.PrizmPublishDate.GetHashCode();
                if (this.PrizmRevisionDate != null)
                    hash = hash * 59 + this.PrizmRevisionDate.GetHashCode();
                if (this.Prescription != null)
                    hash = hash * 59 + this.Prescription.GetHashCode();
                if (this.OverTheCounter != null)
                    hash = hash * 59 + this.OverTheCounter.GetHashCode();
                if (this.DeviceIsAKit != null)
                    hash = hash * 59 + this.DeviceIsAKit.GetHashCode();
                if (this.SingleUse != null)
                    hash = hash * 59 + this.SingleUse.GetHashCode();
                if (this.PackagedSterile != null)
                    hash = hash * 59 + this.PackagedSterile.GetHashCode();
                if (this.RequiresSterilizationPriorUse != null)
                    hash = hash * 59 + this.RequiresSterilizationPriorUse.GetHashCode();
                if (this.SterilizationMethods != null)
                    hash = hash * 59 + this.SterilizationMethods.GetHashCode();
                if (this.ContainsLatex != null)
                    hash = hash * 59 + this.ContainsLatex.GetHashCode();
                if (this.CombinationProduct != null)
                    hash = hash * 59 + this.CombinationProduct.GetHashCode();
                if (this.HumanCellTissue != null)
                    hash = hash * 59 + this.HumanCellTissue.GetHashCode();
                if (this.HCPCS != null)
                    hash = hash * 59 + this.HCPCS.GetHashCode();
                if (this.FDAProductCodeClassifications != null)
                    hash = hash * 59 + this.FDAProductCodeClassifications.GetHashCode();
                if (this.MRISafety != null)
                    hash = hash * 59 + this.MRISafety.GetHashCode();
                if (this.StorageHandling != null)
                    hash = hash * 59 + this.StorageHandling.GetHashCode();
                if (this.DeviceProperties != null)
                    hash = hash * 59 + this.DeviceProperties.GetHashCode();
                if (this.PrizmEndDate != null)
                    hash = hash * 59 + this.PrizmEndDate.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
