/* 
 * FDB Device Services
 *
 * Web API for accessing medical device information
 *
 * OpenAPI spec version: 1.04
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace DeviceSample.Model
{
    /// <summary>
    /// Contains elements that describe a device
    /// </summary>
    [DataContract]
    public partial class Device :  IEquatable<Device>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Device" /> class.
        /// </summary>
        /// <param name="FDBDeviceId">Returns the FDB identifier of the device.</param>
        /// <param name="StandardDeviceName">Returns a normalized name of the device using a descriptive text.</param>
        /// <param name="EnhancedDeviceName">Returns a more descriptive name for a device composed of the labeler name, brand name (if it exists), standard device name, relevant sizes and other characteristics.</param>
        /// <param name="EnhancedDeviceNameLong">Returns enhanced device name.</param>
        /// <param name="BrandName">Returns the Labeler&#39;s Brand Name of the device, typically a trademarked name of the device or device grouping.</param>
        /// <param name="GUDIDBrandName">Returns the GUDID Brand Name of the device.</param>
        /// <param name="GUDIDDescription">Returns the GUDID Description of the device.</param>
        /// <param name="LabelerName">Returns a standardized manufacturer or vendor name of the device.</param>
        /// <param name="UDI_DI">Returns the primary identifier issued by GS1, HIBCC, or ICCBBA to uniquely identify the device.</param>
        /// <param name="UDIDISecondary">Returns a secondary identifier issued by GS1, HIBCC, or ICCBBA to uniquely identify the device.</param>
        /// <param name="GTIN14">Returns Global Trade Identification Number assigned by GS1 for the device.</param>
        /// <param name="HIBC">Returns Healthcare Industry Bar Code assigned by HIBCC for the device.</param>
        /// <param name="ISBT128">Returns the International Society of Blood Transfusion.128 code assigned by ICCBBA for the device.</param>
        /// <param name="DeviceIdentifiers">Returns a list of device identifiers.</param>
        /// <param name="GUDIDVersionModelNumber">Returns the GUDID version model number of the device.</param>
        /// <param name="VersionNumber">Returns the Labeler’s Version Number of the device.</param>
        /// <param name="ModelNumber">Returns the Labeler’s Model Number of the device.</param>
        /// <param name="CatalogNumber">Returns an identifier assigned by the Labeler for use in product catalogs, product ordering and/or labeling; often referred to as an item number, reference number, product number or manufacturer number.</param>
        /// <param name="SizeInfo">Returns a list of clinical dimensions of the product.</param>
        /// <param name="BasePackageType">Returns the type of the base package.</param>
        /// <param name="BasePackageTypeCode">Returns base package type code.</param>
        /// <param name="BasePackageCount">Returns the number of individual devices in the base package.</param>
        /// <param name="PackageInfo">Returns the list of packages for the device.</param>
        /// <param name="DeviceCategories">Returns categorization information about the device.</param>
        /// <param name="StatusId">Returns the status identifier of the device. Possible values are 1 - Live, 2 - Replaced, 3 - Retired.</param>
        /// <param name="StatusDesc">Returns the status description of the device. This is the description of StatusId field. The possible values are &#39;Live&#39;, &#39;Replaced&#39;, &#39;Retired&#39;.</param>
        /// <param name="LotNumberControlCode">Returns the lot number control code. Possible values are 1 - true/yes, 0 - false/no, -1 - Unknown.</param>
        /// <param name="SerialNumberControlCode">Returns the serial number control code. Possible values are 1 - true/yes, 0 - false/no, -1 - Unknown.</param>
        /// <param name="ExpirationDateControlCode">Returns the expiration date control code. Possible values are 1 - true/yes, 0 - false/no, -1 - Unknown.</param>
        /// <param name="ManufacturedDateControlCode">Returns the manufactured date control code. Possible values are 1 - true/yes, 0 - false/no, -1 - Unknown.</param>
        /// <param name="DonationIdNumberCode">Returns the donation id number code. Possible values are 1 - true/yes, 0 - false/no, -1 - Unknown.</param>
        /// <param name="AlternateLabelerNames">Returns one or multiple alternate labeler names, if they exist, for the device; e.g. a previous labeler name or the acquired company name in a merger or acquisition.</param>
        /// <param name="LabelerContactInfo">Returns a list LabelerContact.</param>
        /// <param name="UDIDIPublishDate">Returns the date the device record with the UDI was published in the GUDID (Global Unique Device Identifier Database).</param>
        /// <param name="PrizmPublishDate">Returns the date the device record was first published in the Prizm Medical Device Knowledge Base.</param>
        /// <param name="PrizmRevisionDate">Returns the last date the device record was updated and republished in the Prizm Medical Device Knowledge Base.</param>
        /// <param name="Prescription">Returns the prescription status of the device: True &#x3D; device requires a prescription to use; False &#x3D; does not require a prescription to use; Null &#x3D; information not available.</param>
        /// <param name="OverTheCounter">Returns the over the counter status of the device: True &#x3D; device is available over the counter; False &#x3D; device is not available over the counter; Null &#x3D; information not available.</param>
        /// <param name="DeviceIsAKit">Returns the kit status of the device: True &#x3D; indicates that the device is a convenience, combination, in vitro diagnostic (IVD), or medical procedure kit; False &#x3D; indicates that the device is not such a kit; Null &#x3D; information not available.</param>
        /// <param name="SingleUse">Returns the single versus multiple-use status of the device: True &#x3D; indicates that the device is intended for one use or on a single patient during a single procedure; False &#x3D; indicates that the device can be used multiple times; Null &#x3D; information not available.</param>
        /// <param name="PackagedSterile">Returns the sterilization packaging status of the device: True &#x3D; indicates that the device is packaged as sterile and is free from viable microorganisms; False &#x3D; indicates that the device is not packaged as sterile; Null &#x3D; information not available.  Note: this attribute is not tied to the RequiresSterilizationPriorUse attribute..</param>
        /// <param name="RequiresSterilizationPriorUse">Returns the sterilization requirement status of the device before its use on a patient: True &#x3D; indicates that the device requires sterilization prior to use; False &#x3D; indicates that the device does not require sterilization prior to use; Null &#x3D; information not available.  Note: this attribute is not tied to the PackagedSterile attribute..</param>
        /// <param name="SterilizationMethods">Returns the sterilization methods that can be used for the device, before its use on a patient.  Examples include Dry Heat, Steam, Radiation, Ultraviolet Light, etc..</param>
        /// <param name="ContainsLatex">Returns the latex or natural rubber status of the device or its packaging: True &#x3D; indicates that the device or packaging contains natural rubber latex or dry natural rubber; False &#x3D; indicates that the device or packaging does not contain natural rubber latex or dry natural rubber; Null &#x3D; information not available..</param>
        /// <param name="CombinationProduct">Returns the information about the device regarding if it is used with or packaged together with another product: True &#x3D; indicates that the product is comprised of two or more regulated products that are physically, chemically, or otherwise combined or mixed and produced as a single entity; packaged together as a single package; or packaged separately for the intended use together; False &#x3D; indicates the device is not part of a combination product; Null &#x3D; information not available.</param>
        /// <param name="HCPCSInfo">Returns the HCPCS Code for the device, if it is available and appropriate..</param>
        /// <param name="FDAProductInfo">Returns the FDA Product Code(s), FDA Product Code Name(s) and FDA Product Classification for the device, if they are available.  The FDA Product Code is a three-letter code, each associated with a FDA Product Code Name.  Examples of Product Classifications are Class 1, Class 2 and Class 3..</param>
        /// <param name="MRISafetyInfo">Returns the MRI Safety status of the device.  Valid MRISafetyLabel values are MR Safe, MR Unsafe, MR Conditional, Labeling does not contain MRI safety information; MRISafetyLabel of null &#x3D; information not available..</param>
        /// <param name="HumanCellTissue">Returns the Human Cell, Tissue, Cellular or Tissue-based status of the device: True &#x3D; indicates the device contains or consists of human cells or tissues that are intended for implantation, transplantation, infusion or transfer into a human recipient; False &#x3D; indicates the device does not contain human cells or tissues; Null &#x3D; information not available.</param>
        /// <param name="StorageInfo">Returns Storage and Handling information for the device, if it exists. Can include temperature, humidity and pressure for storage or handling and special storage conditions.  Can include a low or high threshold value or a range of values.  Null &#x3D; information not available..</param>
        /// <param name="DeviceProperties">Returns Device properties.</param>
        /// <param name="LabelerAlias">Returns a list of labeler alias.</param>
        public Device(int? FDBDeviceId = null, string StandardDeviceName = null, string EnhancedDeviceName = null, string EnhancedDeviceNameLong = null, string BrandName = null, string GUDIDBrandName = null, string GUDIDDescription = null, string LabelerName = null, string UDI_DI = null, string UDIDISecondary = null, string GTIN14 = null, string HIBC = null, string ISBT128 = null, List<DeviceIdentifier> DeviceIdentifiers = null, string GUDIDVersionModelNumber = null, string VersionNumber = null, string ModelNumber = null, List<string> CatalogNumber = null, List<SizeInfo> SizeInfo = null, string BasePackageType = null, string BasePackageTypeCode = null, string BasePackageCount = null, List<PackageInfo> PackageInfo = null, List<DeviceCategory> DeviceCategories = null, int? StatusId = null, string StatusDesc = null, int? LotNumberControlCode = null, int? SerialNumberControlCode = null, int? ExpirationDateControlCode = null, int? ManufacturedDateControlCode = null, int? DonationIdNumberCode = null, List<string> AlternateLabelerNames = null, List<LabelerContact> LabelerContactInfo = null, string UDIDIPublishDate = null, string PrizmPublishDate = null, string PrizmRevisionDate = null, bool? Prescription = null, bool? OverTheCounter = null, bool? DeviceIsAKit = null, bool? SingleUse = null, bool? PackagedSterile = null, bool? RequiresSterilizationPriorUse = null, List<string> SterilizationMethods = null, bool? ContainsLatex = null, bool? CombinationProduct = null, List<HCPCSInfo> HCPCSInfo = null, List<FDAProductInfo> FDAProductInfo = null, List<MRISafetyInfo> MRISafetyInfo = null, bool? HumanCellTissue = null, List<StorageInfo> StorageInfo = null, List<DeviceProperty> DeviceProperties = null, List<string> LabelerAlias = null)
        {
            this.FDBDeviceId = FDBDeviceId;
            this.StandardDeviceName = StandardDeviceName;
            this.EnhancedDeviceName = EnhancedDeviceName;
            this.EnhancedDeviceNameLong = EnhancedDeviceNameLong;
            this.BrandName = BrandName;
            this.GUDIDBrandName = GUDIDBrandName;
            this.GUDIDDescription = GUDIDDescription;
            this.LabelerName = LabelerName;
            this.UDI_DI = UDI_DI;
            this.UDIDISecondary = UDIDISecondary;
            this.GTIN14 = GTIN14;
            this.HIBC = HIBC;
            this.ISBT128 = ISBT128;
            this.DeviceIdentifiers = DeviceIdentifiers;
            this.GUDIDVersionModelNumber = GUDIDVersionModelNumber;
            this.VersionNumber = VersionNumber;
            this.ModelNumber = ModelNumber;
            this.CatalogNumber = CatalogNumber;
            this.SizeInfo = SizeInfo;
            this.BasePackageType = BasePackageType;
            this.BasePackageTypeCode = BasePackageTypeCode;
            this.BasePackageCount = BasePackageCount;
            this.PackageInfo = PackageInfo;
            this.DeviceCategories = DeviceCategories;
            this.StatusId = StatusId;
            this.StatusDesc = StatusDesc;
            this.LotNumberControlCode = LotNumberControlCode;
            this.SerialNumberControlCode = SerialNumberControlCode;
            this.ExpirationDateControlCode = ExpirationDateControlCode;
            this.ManufacturedDateControlCode = ManufacturedDateControlCode;
            this.DonationIdNumberCode = DonationIdNumberCode;
            this.AlternateLabelerNames = AlternateLabelerNames;
            this.LabelerContactInfo = LabelerContactInfo;
            this.UDIDIPublishDate = UDIDIPublishDate;
            this.PrizmPublishDate = PrizmPublishDate;
            this.PrizmRevisionDate = PrizmRevisionDate;
            this.Prescription = Prescription;
            this.OverTheCounter = OverTheCounter;
            this.DeviceIsAKit = DeviceIsAKit;
            this.SingleUse = SingleUse;
            this.PackagedSterile = PackagedSterile;
            this.RequiresSterilizationPriorUse = RequiresSterilizationPriorUse;
            this.SterilizationMethods = SterilizationMethods;
            this.ContainsLatex = ContainsLatex;
            this.CombinationProduct = CombinationProduct;
            this.HCPCSInfo = HCPCSInfo;
            this.FDAProductInfo = FDAProductInfo;
            this.MRISafetyInfo = MRISafetyInfo;
            this.HumanCellTissue = HumanCellTissue;
            this.StorageInfo = StorageInfo;
            this.DeviceProperties = DeviceProperties;
            this.LabelerAlias = LabelerAlias;
        }
        
        /// <summary>
        /// Returns the FDB identifier of the device
        /// </summary>
        /// <value>Returns the FDB identifier of the device</value>
        [DataMember(Name="FDBDeviceId", EmitDefaultValue=false)]
        public int? FDBDeviceId { get; set; }
        /// <summary>
        /// Returns a normalized name of the device using a descriptive text
        /// </summary>
        /// <value>Returns a normalized name of the device using a descriptive text</value>
        [DataMember(Name="StandardDeviceName", EmitDefaultValue=false)]
        public string StandardDeviceName { get; set; }
        /// <summary>
        /// Returns a more descriptive name for a device composed of the labeler name, brand name (if it exists), standard device name, relevant sizes and other characteristics
        /// </summary>
        /// <value>Returns a more descriptive name for a device composed of the labeler name, brand name (if it exists), standard device name, relevant sizes and other characteristics</value>
        [DataMember(Name="EnhancedDeviceName", EmitDefaultValue=false)]
        public string EnhancedDeviceName { get; set; }
        /// <summary>
        /// Returns enhanced device name
        /// </summary>
        /// <value>Returns enhanced device name</value>
        [DataMember(Name="EnhancedDeviceNameLong", EmitDefaultValue=false)]
        public string EnhancedDeviceNameLong { get; set; }
        /// <summary>
        /// Returns the Labeler&#39;s Brand Name of the device, typically a trademarked name of the device or device grouping
        /// </summary>
        /// <value>Returns the Labeler&#39;s Brand Name of the device, typically a trademarked name of the device or device grouping</value>
        [DataMember(Name="BrandName", EmitDefaultValue=false)]
        public string BrandName { get; set; }
        /// <summary>
        /// Returns the GUDID Brand Name of the device
        /// </summary>
        /// <value>Returns the GUDID Brand Name of the device</value>
        [DataMember(Name="GUDIDBrandName", EmitDefaultValue=false)]
        public string GUDIDBrandName { get; set; }
        /// <summary>
        /// Returns the GUDID Description of the device
        /// </summary>
        /// <value>Returns the GUDID Description of the device</value>
        [DataMember(Name="GUDIDDescription", EmitDefaultValue=false)]
        public string GUDIDDescription { get; set; }
        /// <summary>
        /// Returns a standardized manufacturer or vendor name of the device
        /// </summary>
        /// <value>Returns a standardized manufacturer or vendor name of the device</value>
        [DataMember(Name="LabelerName", EmitDefaultValue=false)]
        public string LabelerName { get; set; }
        /// <summary>
        /// Returns the primary identifier issued by GS1, HIBCC, or ICCBBA to uniquely identify the device
        /// </summary>
        /// <value>Returns the primary identifier issued by GS1, HIBCC, or ICCBBA to uniquely identify the device</value>
        [DataMember(Name="UDI_DI", EmitDefaultValue=false)]
        public string UDI_DI { get; set; }
        /// <summary>
        /// Returns a secondary identifier issued by GS1, HIBCC, or ICCBBA to uniquely identify the device
        /// </summary>
        /// <value>Returns a secondary identifier issued by GS1, HIBCC, or ICCBBA to uniquely identify the device</value>
        [DataMember(Name="UDI_DI_Secondary", EmitDefaultValue=false)]
        public string UDIDISecondary { get; set; }
        /// <summary>
        /// Returns Global Trade Identification Number assigned by GS1 for the device
        /// </summary>
        /// <value>Returns Global Trade Identification Number assigned by GS1 for the device</value>
        [DataMember(Name="GTIN_14", EmitDefaultValue=false)]
        public string GTIN14 { get; set; }
        /// <summary>
        /// Returns Healthcare Industry Bar Code assigned by HIBCC for the device
        /// </summary>
        /// <value>Returns Healthcare Industry Bar Code assigned by HIBCC for the device</value>
        [DataMember(Name="HIBC", EmitDefaultValue=false)]
        public string HIBC { get; set; }
        /// <summary>
        /// Returns the International Society of Blood Transfusion.128 code assigned by ICCBBA for the device
        /// </summary>
        /// <value>Returns the International Society of Blood Transfusion.128 code assigned by ICCBBA for the device</value>
        [DataMember(Name="ISBT_128", EmitDefaultValue=false)]
        public string ISBT128 { get; set; }
        /// <summary>
        /// Returns a list of device identifiers
        /// </summary>
        /// <value>Returns a list of device identifiers</value>
        [DataMember(Name="DeviceIdentifiers", EmitDefaultValue=false)]
        public List<DeviceIdentifier> DeviceIdentifiers { get; set; }
        /// <summary>
        /// Returns the GUDID version model number of the device
        /// </summary>
        /// <value>Returns the GUDID version model number of the device</value>
        [DataMember(Name="GUDIDVersionModelNumber", EmitDefaultValue=false)]
        public string GUDIDVersionModelNumber { get; set; }
        /// <summary>
        /// Returns the Labeler’s Version Number of the device
        /// </summary>
        /// <value>Returns the Labeler’s Version Number of the device</value>
        [DataMember(Name="VersionNumber", EmitDefaultValue=false)]
        public string VersionNumber { get; set; }
        /// <summary>
        /// Returns the Labeler’s Model Number of the device
        /// </summary>
        /// <value>Returns the Labeler’s Model Number of the device</value>
        [DataMember(Name="ModelNumber", EmitDefaultValue=false)]
        public string ModelNumber { get; set; }
        /// <summary>
        /// Returns an identifier assigned by the Labeler for use in product catalogs, product ordering and/or labeling; often referred to as an item number, reference number, product number or manufacturer number
        /// </summary>
        /// <value>Returns an identifier assigned by the Labeler for use in product catalogs, product ordering and/or labeling; often referred to as an item number, reference number, product number or manufacturer number</value>
        [DataMember(Name="CatalogNumber", EmitDefaultValue=false)]
        public List<string> CatalogNumber { get; set; }
        /// <summary>
        /// Returns a list of clinical dimensions of the product
        /// </summary>
        /// <value>Returns a list of clinical dimensions of the product</value>
        [DataMember(Name="SizeInfo", EmitDefaultValue=false)]
        public List<SizeInfo> SizeInfo { get; set; }
        /// <summary>
        /// Returns the type of the base package
        /// </summary>
        /// <value>Returns the type of the base package</value>
        [DataMember(Name="BasePackageType", EmitDefaultValue=false)]
        public string BasePackageType { get; set; }
        /// <summary>
        /// Returns base package type code
        /// </summary>
        /// <value>Returns base package type code</value>
        [DataMember(Name="BasePackageTypeCode", EmitDefaultValue=false)]
        public string BasePackageTypeCode { get; set; }
        /// <summary>
        /// Returns the number of individual devices in the base package
        /// </summary>
        /// <value>Returns the number of individual devices in the base package</value>
        [DataMember(Name="BasePackageCount", EmitDefaultValue=false)]
        public string BasePackageCount { get; set; }
        /// <summary>
        /// Returns the list of packages for the device
        /// </summary>
        /// <value>Returns the list of packages for the device</value>
        [DataMember(Name="PackageInfo", EmitDefaultValue=false)]
        public List<PackageInfo> PackageInfo { get; set; }
        /// <summary>
        /// Returns categorization information about the device
        /// </summary>
        /// <value>Returns categorization information about the device</value>
        [DataMember(Name="DeviceCategories", EmitDefaultValue=false)]
        public List<DeviceCategory> DeviceCategories { get; set; }
        /// <summary>
        /// Returns the status identifier of the device. Possible values are 1 - Live, 2 - Replaced, 3 - Retired
        /// </summary>
        /// <value>Returns the status identifier of the device. Possible values are 1 - Live, 2 - Replaced, 3 - Retired</value>
        [DataMember(Name="StatusId", EmitDefaultValue=false)]
        public int? StatusId { get; set; }
        /// <summary>
        /// Returns the status description of the device. This is the description of StatusId field. The possible values are &#39;Live&#39;, &#39;Replaced&#39;, &#39;Retired&#39;
        /// </summary>
        /// <value>Returns the status description of the device. This is the description of StatusId field. The possible values are &#39;Live&#39;, &#39;Replaced&#39;, &#39;Retired&#39;</value>
        [DataMember(Name="StatusDesc", EmitDefaultValue=false)]
        public string StatusDesc { get; set; }
        /// <summary>
        /// Returns the lot number control code. Possible values are 1 - true/yes, 0 - false/no, -1 - Unknown
        /// </summary>
        /// <value>Returns the lot number control code. Possible values are 1 - true/yes, 0 - false/no, -1 - Unknown</value>
        [DataMember(Name="LotNumberControlCode", EmitDefaultValue=false)]
        public int? LotNumberControlCode { get; set; }
        /// <summary>
        /// Returns the serial number control code. Possible values are 1 - true/yes, 0 - false/no, -1 - Unknown
        /// </summary>
        /// <value>Returns the serial number control code. Possible values are 1 - true/yes, 0 - false/no, -1 - Unknown</value>
        [DataMember(Name="SerialNumberControlCode", EmitDefaultValue=false)]
        public int? SerialNumberControlCode { get; set; }
        /// <summary>
        /// Returns the expiration date control code. Possible values are 1 - true/yes, 0 - false/no, -1 - Unknown
        /// </summary>
        /// <value>Returns the expiration date control code. Possible values are 1 - true/yes, 0 - false/no, -1 - Unknown</value>
        [DataMember(Name="ExpirationDateControlCode", EmitDefaultValue=false)]
        public int? ExpirationDateControlCode { get; set; }
        /// <summary>
        /// Returns the manufactured date control code. Possible values are 1 - true/yes, 0 - false/no, -1 - Unknown
        /// </summary>
        /// <value>Returns the manufactured date control code. Possible values are 1 - true/yes, 0 - false/no, -1 - Unknown</value>
        [DataMember(Name="ManufacturedDateControlCode", EmitDefaultValue=false)]
        public int? ManufacturedDateControlCode { get; set; }
        /// <summary>
        /// Returns the donation id number code. Possible values are 1 - true/yes, 0 - false/no, -1 - Unknown
        /// </summary>
        /// <value>Returns the donation id number code. Possible values are 1 - true/yes, 0 - false/no, -1 - Unknown</value>
        [DataMember(Name="DonationIdNumberCode", EmitDefaultValue=false)]
        public int? DonationIdNumberCode { get; set; }
        /// <summary>
        /// Returns one or multiple alternate labeler names, if they exist, for the device; e.g. a previous labeler name or the acquired company name in a merger or acquisition
        /// </summary>
        /// <value>Returns one or multiple alternate labeler names, if they exist, for the device; e.g. a previous labeler name or the acquired company name in a merger or acquisition</value>
        [DataMember(Name="AlternateLabelerNames", EmitDefaultValue=false)]
        public List<string> AlternateLabelerNames { get; set; }
        /// <summary>
        /// Returns a list LabelerContact
        /// </summary>
        /// <value>Returns a list LabelerContact</value>
        [DataMember(Name="LabelerContactInfo", EmitDefaultValue=false)]
        public List<LabelerContact> LabelerContactInfo { get; set; }
        /// <summary>
        /// Returns the date the device record with the UDI was published in the GUDID (Global Unique Device Identifier Database)
        /// </summary>
        /// <value>Returns the date the device record with the UDI was published in the GUDID (Global Unique Device Identifier Database)</value>
        [DataMember(Name="UDI_DIPublishDate", EmitDefaultValue=false)]
        public string UDIDIPublishDate { get; set; }
        /// <summary>
        /// Returns the date the device record was first published in the Prizm Medical Device Knowledge Base
        /// </summary>
        /// <value>Returns the date the device record was first published in the Prizm Medical Device Knowledge Base</value>
        [DataMember(Name="PrizmPublishDate", EmitDefaultValue=false)]
        public string PrizmPublishDate { get; set; }
        /// <summary>
        /// Returns the last date the device record was updated and republished in the Prizm Medical Device Knowledge Base
        /// </summary>
        /// <value>Returns the last date the device record was updated and republished in the Prizm Medical Device Knowledge Base</value>
        [DataMember(Name="PrizmRevisionDate", EmitDefaultValue=false)]
        public string PrizmRevisionDate { get; set; }
        /// <summary>
        /// Returns the prescription status of the device: True &#x3D; device requires a prescription to use; False &#x3D; does not require a prescription to use; Null &#x3D; information not available
        /// </summary>
        /// <value>Returns the prescription status of the device: True &#x3D; device requires a prescription to use; False &#x3D; does not require a prescription to use; Null &#x3D; information not available</value>
        [DataMember(Name="Prescription", EmitDefaultValue=false)]
        public bool? Prescription { get; set; }
        /// <summary>
        /// Returns the over the counter status of the device: True &#x3D; device is available over the counter; False &#x3D; device is not available over the counter; Null &#x3D; information not available
        /// </summary>
        /// <value>Returns the over the counter status of the device: True &#x3D; device is available over the counter; False &#x3D; device is not available over the counter; Null &#x3D; information not available</value>
        [DataMember(Name="OverTheCounter", EmitDefaultValue=false)]
        public bool? OverTheCounter { get; set; }
        /// <summary>
        /// Returns the kit status of the device: True &#x3D; indicates that the device is a convenience, combination, in vitro diagnostic (IVD), or medical procedure kit; False &#x3D; indicates that the device is not such a kit; Null &#x3D; information not available
        /// </summary>
        /// <value>Returns the kit status of the device: True &#x3D; indicates that the device is a convenience, combination, in vitro diagnostic (IVD), or medical procedure kit; False &#x3D; indicates that the device is not such a kit; Null &#x3D; information not available</value>
        [DataMember(Name="DeviceIsAKit", EmitDefaultValue=false)]
        public bool? DeviceIsAKit { get; set; }
        /// <summary>
        /// Returns the single versus multiple-use status of the device: True &#x3D; indicates that the device is intended for one use or on a single patient during a single procedure; False &#x3D; indicates that the device can be used multiple times; Null &#x3D; information not available
        /// </summary>
        /// <value>Returns the single versus multiple-use status of the device: True &#x3D; indicates that the device is intended for one use or on a single patient during a single procedure; False &#x3D; indicates that the device can be used multiple times; Null &#x3D; information not available</value>
        [DataMember(Name="SingleUse", EmitDefaultValue=false)]
        public bool? SingleUse { get; set; }
        /// <summary>
        /// Returns the sterilization packaging status of the device: True &#x3D; indicates that the device is packaged as sterile and is free from viable microorganisms; False &#x3D; indicates that the device is not packaged as sterile; Null &#x3D; information not available.  Note: this attribute is not tied to the RequiresSterilizationPriorUse attribute.
        /// </summary>
        /// <value>Returns the sterilization packaging status of the device: True &#x3D; indicates that the device is packaged as sterile and is free from viable microorganisms; False &#x3D; indicates that the device is not packaged as sterile; Null &#x3D; information not available.  Note: this attribute is not tied to the RequiresSterilizationPriorUse attribute.</value>
        [DataMember(Name="PackagedSterile", EmitDefaultValue=false)]
        public bool? PackagedSterile { get; set; }
        /// <summary>
        /// Returns the sterilization requirement status of the device before its use on a patient: True &#x3D; indicates that the device requires sterilization prior to use; False &#x3D; indicates that the device does not require sterilization prior to use; Null &#x3D; information not available.  Note: this attribute is not tied to the PackagedSterile attribute.
        /// </summary>
        /// <value>Returns the sterilization requirement status of the device before its use on a patient: True &#x3D; indicates that the device requires sterilization prior to use; False &#x3D; indicates that the device does not require sterilization prior to use; Null &#x3D; information not available.  Note: this attribute is not tied to the PackagedSterile attribute.</value>
        [DataMember(Name="RequiresSterilizationPriorUse", EmitDefaultValue=false)]
        public bool? RequiresSterilizationPriorUse { get; set; }
        /// <summary>
        /// Returns the sterilization methods that can be used for the device, before its use on a patient.  Examples include Dry Heat, Steam, Radiation, Ultraviolet Light, etc.
        /// </summary>
        /// <value>Returns the sterilization methods that can be used for the device, before its use on a patient.  Examples include Dry Heat, Steam, Radiation, Ultraviolet Light, etc.</value>
        [DataMember(Name="SterilizationMethods", EmitDefaultValue=false)]
        public List<string> SterilizationMethods { get; set; }
        /// <summary>
        /// Returns the latex or natural rubber status of the device or its packaging: True &#x3D; indicates that the device or packaging contains natural rubber latex or dry natural rubber; False &#x3D; indicates that the device or packaging does not contain natural rubber latex or dry natural rubber; Null &#x3D; information not available.
        /// </summary>
        /// <value>Returns the latex or natural rubber status of the device or its packaging: True &#x3D; indicates that the device or packaging contains natural rubber latex or dry natural rubber; False &#x3D; indicates that the device or packaging does not contain natural rubber latex or dry natural rubber; Null &#x3D; information not available.</value>
        [DataMember(Name="ContainsLatex", EmitDefaultValue=false)]
        public bool? ContainsLatex { get; set; }
        /// <summary>
        /// Returns the information about the device regarding if it is used with or packaged together with another product: True &#x3D; indicates that the product is comprised of two or more regulated products that are physically, chemically, or otherwise combined or mixed and produced as a single entity; packaged together as a single package; or packaged separately for the intended use together; False &#x3D; indicates the device is not part of a combination product; Null &#x3D; information not available
        /// </summary>
        /// <value>Returns the information about the device regarding if it is used with or packaged together with another product: True &#x3D; indicates that the product is comprised of two or more regulated products that are physically, chemically, or otherwise combined or mixed and produced as a single entity; packaged together as a single package; or packaged separately for the intended use together; False &#x3D; indicates the device is not part of a combination product; Null &#x3D; information not available</value>
        [DataMember(Name="CombinationProduct", EmitDefaultValue=false)]
        public bool? CombinationProduct { get; set; }
        /// <summary>
        /// Returns the HCPCS Code for the device, if it is available and appropriate.
        /// </summary>
        /// <value>Returns the HCPCS Code for the device, if it is available and appropriate.</value>
        [DataMember(Name="HCPCSInfo", EmitDefaultValue=false)]
        public List<HCPCSInfo> HCPCSInfo { get; set; }
        /// <summary>
        /// Returns the FDA Product Code(s), FDA Product Code Name(s) and FDA Product Classification for the device, if they are available.  The FDA Product Code is a three-letter code, each associated with a FDA Product Code Name.  Examples of Product Classifications are Class 1, Class 2 and Class 3.
        /// </summary>
        /// <value>Returns the FDA Product Code(s), FDA Product Code Name(s) and FDA Product Classification for the device, if they are available.  The FDA Product Code is a three-letter code, each associated with a FDA Product Code Name.  Examples of Product Classifications are Class 1, Class 2 and Class 3.</value>
        [DataMember(Name="FDAProductInfo", EmitDefaultValue=false)]
        public List<FDAProductInfo> FDAProductInfo { get; set; }
        /// <summary>
        /// Returns the MRI Safety status of the device.  Valid MRISafetyLabel values are MR Safe, MR Unsafe, MR Conditional, Labeling does not contain MRI safety information; MRISafetyLabel of null &#x3D; information not available.
        /// </summary>
        /// <value>Returns the MRI Safety status of the device.  Valid MRISafetyLabel values are MR Safe, MR Unsafe, MR Conditional, Labeling does not contain MRI safety information; MRISafetyLabel of null &#x3D; information not available.</value>
        [DataMember(Name="MRISafetyInfo", EmitDefaultValue=false)]
        public List<MRISafetyInfo> MRISafetyInfo { get; set; }
        /// <summary>
        /// Returns the Human Cell, Tissue, Cellular or Tissue-based status of the device: True &#x3D; indicates the device contains or consists of human cells or tissues that are intended for implantation, transplantation, infusion or transfer into a human recipient; False &#x3D; indicates the device does not contain human cells or tissues; Null &#x3D; information not available
        /// </summary>
        /// <value>Returns the Human Cell, Tissue, Cellular or Tissue-based status of the device: True &#x3D; indicates the device contains or consists of human cells or tissues that are intended for implantation, transplantation, infusion or transfer into a human recipient; False &#x3D; indicates the device does not contain human cells or tissues; Null &#x3D; information not available</value>
        [DataMember(Name="HumanCellTissue", EmitDefaultValue=false)]
        public bool? HumanCellTissue { get; set; }
        /// <summary>
        /// Returns Storage and Handling information for the device, if it exists. Can include temperature, humidity and pressure for storage or handling and special storage conditions.  Can include a low or high threshold value or a range of values.  Null &#x3D; information not available.
        /// </summary>
        /// <value>Returns Storage and Handling information for the device, if it exists. Can include temperature, humidity and pressure for storage or handling and special storage conditions.  Can include a low or high threshold value or a range of values.  Null &#x3D; information not available.</value>
        [DataMember(Name="StorageInfo", EmitDefaultValue=false)]
        public List<StorageInfo> StorageInfo { get; set; }
        /// <summary>
        /// Returns Device properties
        /// </summary>
        /// <value>Returns Device properties</value>
        [DataMember(Name="DeviceProperties", EmitDefaultValue=false)]
        public List<DeviceProperty> DeviceProperties { get; set; }
        /// <summary>
        /// Returns a list of labeler alias
        /// </summary>
        /// <value>Returns a list of labeler alias</value>
        [DataMember(Name="LabelerAlias", EmitDefaultValue=false)]
        public List<string> LabelerAlias { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Device {\n");
            sb.Append("  FDBDeviceId: ").Append(FDBDeviceId).Append("\n");
            sb.Append("  StandardDeviceName: ").Append(StandardDeviceName).Append("\n");
            sb.Append("  EnhancedDeviceName: ").Append(EnhancedDeviceName).Append("\n");
            sb.Append("  EnhancedDeviceNameLong: ").Append(EnhancedDeviceNameLong).Append("\n");
            sb.Append("  BrandName: ").Append(BrandName).Append("\n");
            sb.Append("  GUDIDBrandName: ").Append(GUDIDBrandName).Append("\n");
            sb.Append("  GUDIDDescription: ").Append(GUDIDDescription).Append("\n");
            sb.Append("  LabelerName: ").Append(LabelerName).Append("\n");
            sb.Append("  UDI_DI: ").Append(UDI_DI).Append("\n");
            sb.Append("  UDIDISecondary: ").Append(UDIDISecondary).Append("\n");
            sb.Append("  GTIN14: ").Append(GTIN14).Append("\n");
            sb.Append("  HIBC: ").Append(HIBC).Append("\n");
            sb.Append("  ISBT128: ").Append(ISBT128).Append("\n");
            sb.Append("  DeviceIdentifiers: ").Append(DeviceIdentifiers).Append("\n");
            sb.Append("  GUDIDVersionModelNumber: ").Append(GUDIDVersionModelNumber).Append("\n");
            sb.Append("  VersionNumber: ").Append(VersionNumber).Append("\n");
            sb.Append("  ModelNumber: ").Append(ModelNumber).Append("\n");
            sb.Append("  CatalogNumber: ").Append(CatalogNumber).Append("\n");
            sb.Append("  SizeInfo: ").Append(SizeInfo).Append("\n");
            sb.Append("  BasePackageType: ").Append(BasePackageType).Append("\n");
            sb.Append("  BasePackageTypeCode: ").Append(BasePackageTypeCode).Append("\n");
            sb.Append("  BasePackageCount: ").Append(BasePackageCount).Append("\n");
            sb.Append("  PackageInfo: ").Append(PackageInfo).Append("\n");
            sb.Append("  DeviceCategories: ").Append(DeviceCategories).Append("\n");
            sb.Append("  StatusId: ").Append(StatusId).Append("\n");
            sb.Append("  StatusDesc: ").Append(StatusDesc).Append("\n");
            sb.Append("  LotNumberControlCode: ").Append(LotNumberControlCode).Append("\n");
            sb.Append("  SerialNumberControlCode: ").Append(SerialNumberControlCode).Append("\n");
            sb.Append("  ExpirationDateControlCode: ").Append(ExpirationDateControlCode).Append("\n");
            sb.Append("  ManufacturedDateControlCode: ").Append(ManufacturedDateControlCode).Append("\n");
            sb.Append("  DonationIdNumberCode: ").Append(DonationIdNumberCode).Append("\n");
            sb.Append("  AlternateLabelerNames: ").Append(AlternateLabelerNames).Append("\n");
            sb.Append("  LabelerContactInfo: ").Append(LabelerContactInfo).Append("\n");
            sb.Append("  UDIDIPublishDate: ").Append(UDIDIPublishDate).Append("\n");
            sb.Append("  PrizmPublishDate: ").Append(PrizmPublishDate).Append("\n");
            sb.Append("  PrizmRevisionDate: ").Append(PrizmRevisionDate).Append("\n");
            sb.Append("  Prescription: ").Append(Prescription).Append("\n");
            sb.Append("  OverTheCounter: ").Append(OverTheCounter).Append("\n");
            sb.Append("  DeviceIsAKit: ").Append(DeviceIsAKit).Append("\n");
            sb.Append("  SingleUse: ").Append(SingleUse).Append("\n");
            sb.Append("  PackagedSterile: ").Append(PackagedSterile).Append("\n");
            sb.Append("  RequiresSterilizationPriorUse: ").Append(RequiresSterilizationPriorUse).Append("\n");
            sb.Append("  SterilizationMethods: ").Append(SterilizationMethods).Append("\n");
            sb.Append("  ContainsLatex: ").Append(ContainsLatex).Append("\n");
            sb.Append("  CombinationProduct: ").Append(CombinationProduct).Append("\n");
            sb.Append("  HCPCSInfo: ").Append(HCPCSInfo).Append("\n");
            sb.Append("  FDAProductInfo: ").Append(FDAProductInfo).Append("\n");
            sb.Append("  MRISafetyInfo: ").Append(MRISafetyInfo).Append("\n");
            sb.Append("  HumanCellTissue: ").Append(HumanCellTissue).Append("\n");
            sb.Append("  StorageInfo: ").Append(StorageInfo).Append("\n");
            sb.Append("  DeviceProperties: ").Append(DeviceProperties).Append("\n");
            sb.Append("  LabelerAlias: ").Append(LabelerAlias).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Device);
        }

        /// <summary>
        /// Returns true if Device instances are equal
        /// </summary>
        /// <param name="other">Instance of Device to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Device other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.FDBDeviceId == other.FDBDeviceId ||
                    this.FDBDeviceId != null &&
                    this.FDBDeviceId.Equals(other.FDBDeviceId)
                ) && 
                (
                    this.StandardDeviceName == other.StandardDeviceName ||
                    this.StandardDeviceName != null &&
                    this.StandardDeviceName.Equals(other.StandardDeviceName)
                ) && 
                (
                    this.EnhancedDeviceName == other.EnhancedDeviceName ||
                    this.EnhancedDeviceName != null &&
                    this.EnhancedDeviceName.Equals(other.EnhancedDeviceName)
                ) && 
                (
                    this.EnhancedDeviceNameLong == other.EnhancedDeviceNameLong ||
                    this.EnhancedDeviceNameLong != null &&
                    this.EnhancedDeviceNameLong.Equals(other.EnhancedDeviceNameLong)
                ) && 
                (
                    this.BrandName == other.BrandName ||
                    this.BrandName != null &&
                    this.BrandName.Equals(other.BrandName)
                ) && 
                (
                    this.GUDIDBrandName == other.GUDIDBrandName ||
                    this.GUDIDBrandName != null &&
                    this.GUDIDBrandName.Equals(other.GUDIDBrandName)
                ) && 
                (
                    this.GUDIDDescription == other.GUDIDDescription ||
                    this.GUDIDDescription != null &&
                    this.GUDIDDescription.Equals(other.GUDIDDescription)
                ) && 
                (
                    this.LabelerName == other.LabelerName ||
                    this.LabelerName != null &&
                    this.LabelerName.Equals(other.LabelerName)
                ) && 
                (
                    this.UDI_DI == other.UDI_DI ||
                    this.UDI_DI != null &&
                    this.UDI_DI.Equals(other.UDI_DI)
                ) && 
                (
                    this.UDIDISecondary == other.UDIDISecondary ||
                    this.UDIDISecondary != null &&
                    this.UDIDISecondary.Equals(other.UDIDISecondary)
                ) && 
                (
                    this.GTIN14 == other.GTIN14 ||
                    this.GTIN14 != null &&
                    this.GTIN14.Equals(other.GTIN14)
                ) && 
                (
                    this.HIBC == other.HIBC ||
                    this.HIBC != null &&
                    this.HIBC.Equals(other.HIBC)
                ) && 
                (
                    this.ISBT128 == other.ISBT128 ||
                    this.ISBT128 != null &&
                    this.ISBT128.Equals(other.ISBT128)
                ) && 
                (
                    this.DeviceIdentifiers == other.DeviceIdentifiers ||
                    this.DeviceIdentifiers != null &&
                    this.DeviceIdentifiers.SequenceEqual(other.DeviceIdentifiers)
                ) && 
                (
                    this.GUDIDVersionModelNumber == other.GUDIDVersionModelNumber ||
                    this.GUDIDVersionModelNumber != null &&
                    this.GUDIDVersionModelNumber.Equals(other.GUDIDVersionModelNumber)
                ) && 
                (
                    this.VersionNumber == other.VersionNumber ||
                    this.VersionNumber != null &&
                    this.VersionNumber.Equals(other.VersionNumber)
                ) && 
                (
                    this.ModelNumber == other.ModelNumber ||
                    this.ModelNumber != null &&
                    this.ModelNumber.Equals(other.ModelNumber)
                ) && 
                (
                    this.CatalogNumber == other.CatalogNumber ||
                    this.CatalogNumber != null &&
                    this.CatalogNumber.SequenceEqual(other.CatalogNumber)
                ) && 
                (
                    this.SizeInfo == other.SizeInfo ||
                    this.SizeInfo != null &&
                    this.SizeInfo.SequenceEqual(other.SizeInfo)
                ) && 
                (
                    this.BasePackageType == other.BasePackageType ||
                    this.BasePackageType != null &&
                    this.BasePackageType.Equals(other.BasePackageType)
                ) && 
                (
                    this.BasePackageTypeCode == other.BasePackageTypeCode ||
                    this.BasePackageTypeCode != null &&
                    this.BasePackageTypeCode.Equals(other.BasePackageTypeCode)
                ) && 
                (
                    this.BasePackageCount == other.BasePackageCount ||
                    this.BasePackageCount != null &&
                    this.BasePackageCount.Equals(other.BasePackageCount)
                ) && 
                (
                    this.PackageInfo == other.PackageInfo ||
                    this.PackageInfo != null &&
                    this.PackageInfo.SequenceEqual(other.PackageInfo)
                ) && 
                (
                    this.DeviceCategories == other.DeviceCategories ||
                    this.DeviceCategories != null &&
                    this.DeviceCategories.SequenceEqual(other.DeviceCategories)
                ) && 
                (
                    this.StatusId == other.StatusId ||
                    this.StatusId != null &&
                    this.StatusId.Equals(other.StatusId)
                ) && 
                (
                    this.StatusDesc == other.StatusDesc ||
                    this.StatusDesc != null &&
                    this.StatusDesc.Equals(other.StatusDesc)
                ) && 
                (
                    this.LotNumberControlCode == other.LotNumberControlCode ||
                    this.LotNumberControlCode != null &&
                    this.LotNumberControlCode.Equals(other.LotNumberControlCode)
                ) && 
                (
                    this.SerialNumberControlCode == other.SerialNumberControlCode ||
                    this.SerialNumberControlCode != null &&
                    this.SerialNumberControlCode.Equals(other.SerialNumberControlCode)
                ) && 
                (
                    this.ExpirationDateControlCode == other.ExpirationDateControlCode ||
                    this.ExpirationDateControlCode != null &&
                    this.ExpirationDateControlCode.Equals(other.ExpirationDateControlCode)
                ) && 
                (
                    this.ManufacturedDateControlCode == other.ManufacturedDateControlCode ||
                    this.ManufacturedDateControlCode != null &&
                    this.ManufacturedDateControlCode.Equals(other.ManufacturedDateControlCode)
                ) && 
                (
                    this.DonationIdNumberCode == other.DonationIdNumberCode ||
                    this.DonationIdNumberCode != null &&
                    this.DonationIdNumberCode.Equals(other.DonationIdNumberCode)
                ) && 
                (
                    this.AlternateLabelerNames == other.AlternateLabelerNames ||
                    this.AlternateLabelerNames != null &&
                    this.AlternateLabelerNames.SequenceEqual(other.AlternateLabelerNames)
                ) && 
                (
                    this.LabelerContactInfo == other.LabelerContactInfo ||
                    this.LabelerContactInfo != null &&
                    this.LabelerContactInfo.SequenceEqual(other.LabelerContactInfo)
                ) && 
                (
                    this.UDIDIPublishDate == other.UDIDIPublishDate ||
                    this.UDIDIPublishDate != null &&
                    this.UDIDIPublishDate.Equals(other.UDIDIPublishDate)
                ) && 
                (
                    this.PrizmPublishDate == other.PrizmPublishDate ||
                    this.PrizmPublishDate != null &&
                    this.PrizmPublishDate.Equals(other.PrizmPublishDate)
                ) && 
                (
                    this.PrizmRevisionDate == other.PrizmRevisionDate ||
                    this.PrizmRevisionDate != null &&
                    this.PrizmRevisionDate.Equals(other.PrizmRevisionDate)
                ) && 
                (
                    this.Prescription == other.Prescription ||
                    this.Prescription != null &&
                    this.Prescription.Equals(other.Prescription)
                ) && 
                (
                    this.OverTheCounter == other.OverTheCounter ||
                    this.OverTheCounter != null &&
                    this.OverTheCounter.Equals(other.OverTheCounter)
                ) && 
                (
                    this.DeviceIsAKit == other.DeviceIsAKit ||
                    this.DeviceIsAKit != null &&
                    this.DeviceIsAKit.Equals(other.DeviceIsAKit)
                ) && 
                (
                    this.SingleUse == other.SingleUse ||
                    this.SingleUse != null &&
                    this.SingleUse.Equals(other.SingleUse)
                ) && 
                (
                    this.PackagedSterile == other.PackagedSterile ||
                    this.PackagedSterile != null &&
                    this.PackagedSterile.Equals(other.PackagedSterile)
                ) && 
                (
                    this.RequiresSterilizationPriorUse == other.RequiresSterilizationPriorUse ||
                    this.RequiresSterilizationPriorUse != null &&
                    this.RequiresSterilizationPriorUse.Equals(other.RequiresSterilizationPriorUse)
                ) && 
                (
                    this.SterilizationMethods == other.SterilizationMethods ||
                    this.SterilizationMethods != null &&
                    this.SterilizationMethods.SequenceEqual(other.SterilizationMethods)
                ) && 
                (
                    this.ContainsLatex == other.ContainsLatex ||
                    this.ContainsLatex != null &&
                    this.ContainsLatex.Equals(other.ContainsLatex)
                ) && 
                (
                    this.CombinationProduct == other.CombinationProduct ||
                    this.CombinationProduct != null &&
                    this.CombinationProduct.Equals(other.CombinationProduct)
                ) && 
                (
                    this.HCPCSInfo == other.HCPCSInfo ||
                    this.HCPCSInfo != null &&
                    this.HCPCSInfo.SequenceEqual(other.HCPCSInfo)
                ) && 
                (
                    this.FDAProductInfo == other.FDAProductInfo ||
                    this.FDAProductInfo != null &&
                    this.FDAProductInfo.SequenceEqual(other.FDAProductInfo)
                ) && 
                (
                    this.MRISafetyInfo == other.MRISafetyInfo ||
                    this.MRISafetyInfo != null &&
                    this.MRISafetyInfo.SequenceEqual(other.MRISafetyInfo)
                ) && 
                (
                    this.HumanCellTissue == other.HumanCellTissue ||
                    this.HumanCellTissue != null &&
                    this.HumanCellTissue.Equals(other.HumanCellTissue)
                ) && 
                (
                    this.StorageInfo == other.StorageInfo ||
                    this.StorageInfo != null &&
                    this.StorageInfo.SequenceEqual(other.StorageInfo)
                ) && 
                (
                    this.DeviceProperties == other.DeviceProperties ||
                    this.DeviceProperties != null &&
                    this.DeviceProperties.SequenceEqual(other.DeviceProperties)
                ) && 
                (
                    this.LabelerAlias == other.LabelerAlias ||
                    this.LabelerAlias != null &&
                    this.LabelerAlias.SequenceEqual(other.LabelerAlias)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.FDBDeviceId != null)
                    hash = hash * 59 + this.FDBDeviceId.GetHashCode();
                if (this.StandardDeviceName != null)
                    hash = hash * 59 + this.StandardDeviceName.GetHashCode();
                if (this.EnhancedDeviceName != null)
                    hash = hash * 59 + this.EnhancedDeviceName.GetHashCode();
                if (this.EnhancedDeviceNameLong != null)
                    hash = hash * 59 + this.EnhancedDeviceNameLong.GetHashCode();
                if (this.BrandName != null)
                    hash = hash * 59 + this.BrandName.GetHashCode();
                if (this.GUDIDBrandName != null)
                    hash = hash * 59 + this.GUDIDBrandName.GetHashCode();
                if (this.GUDIDDescription != null)
                    hash = hash * 59 + this.GUDIDDescription.GetHashCode();
                if (this.LabelerName != null)
                    hash = hash * 59 + this.LabelerName.GetHashCode();
                if (this.UDI_DI != null)
                    hash = hash * 59 + this.UDI_DI.GetHashCode();
                if (this.UDIDISecondary != null)
                    hash = hash * 59 + this.UDIDISecondary.GetHashCode();
                if (this.GTIN14 != null)
                    hash = hash * 59 + this.GTIN14.GetHashCode();
                if (this.HIBC != null)
                    hash = hash * 59 + this.HIBC.GetHashCode();
                if (this.ISBT128 != null)
                    hash = hash * 59 + this.ISBT128.GetHashCode();
                if (this.DeviceIdentifiers != null)
                    hash = hash * 59 + this.DeviceIdentifiers.GetHashCode();
                if (this.GUDIDVersionModelNumber != null)
                    hash = hash * 59 + this.GUDIDVersionModelNumber.GetHashCode();
                if (this.VersionNumber != null)
                    hash = hash * 59 + this.VersionNumber.GetHashCode();
                if (this.ModelNumber != null)
                    hash = hash * 59 + this.ModelNumber.GetHashCode();
                if (this.CatalogNumber != null)
                    hash = hash * 59 + this.CatalogNumber.GetHashCode();
                if (this.SizeInfo != null)
                    hash = hash * 59 + this.SizeInfo.GetHashCode();
                if (this.BasePackageType != null)
                    hash = hash * 59 + this.BasePackageType.GetHashCode();
                if (this.BasePackageTypeCode != null)
                    hash = hash * 59 + this.BasePackageTypeCode.GetHashCode();
                if (this.BasePackageCount != null)
                    hash = hash * 59 + this.BasePackageCount.GetHashCode();
                if (this.PackageInfo != null)
                    hash = hash * 59 + this.PackageInfo.GetHashCode();
                if (this.DeviceCategories != null)
                    hash = hash * 59 + this.DeviceCategories.GetHashCode();
                if (this.StatusId != null)
                    hash = hash * 59 + this.StatusId.GetHashCode();
                if (this.StatusDesc != null)
                    hash = hash * 59 + this.StatusDesc.GetHashCode();
                if (this.LotNumberControlCode != null)
                    hash = hash * 59 + this.LotNumberControlCode.GetHashCode();
                if (this.SerialNumberControlCode != null)
                    hash = hash * 59 + this.SerialNumberControlCode.GetHashCode();
                if (this.ExpirationDateControlCode != null)
                    hash = hash * 59 + this.ExpirationDateControlCode.GetHashCode();
                if (this.ManufacturedDateControlCode != null)
                    hash = hash * 59 + this.ManufacturedDateControlCode.GetHashCode();
                if (this.DonationIdNumberCode != null)
                    hash = hash * 59 + this.DonationIdNumberCode.GetHashCode();
                if (this.AlternateLabelerNames != null)
                    hash = hash * 59 + this.AlternateLabelerNames.GetHashCode();
                if (this.LabelerContactInfo != null)
                    hash = hash * 59 + this.LabelerContactInfo.GetHashCode();
                if (this.UDIDIPublishDate != null)
                    hash = hash * 59 + this.UDIDIPublishDate.GetHashCode();
                if (this.PrizmPublishDate != null)
                    hash = hash * 59 + this.PrizmPublishDate.GetHashCode();
                if (this.PrizmRevisionDate != null)
                    hash = hash * 59 + this.PrizmRevisionDate.GetHashCode();
                if (this.Prescription != null)
                    hash = hash * 59 + this.Prescription.GetHashCode();
                if (this.OverTheCounter != null)
                    hash = hash * 59 + this.OverTheCounter.GetHashCode();
                if (this.DeviceIsAKit != null)
                    hash = hash * 59 + this.DeviceIsAKit.GetHashCode();
                if (this.SingleUse != null)
                    hash = hash * 59 + this.SingleUse.GetHashCode();
                if (this.PackagedSterile != null)
                    hash = hash * 59 + this.PackagedSterile.GetHashCode();
                if (this.RequiresSterilizationPriorUse != null)
                    hash = hash * 59 + this.RequiresSterilizationPriorUse.GetHashCode();
                if (this.SterilizationMethods != null)
                    hash = hash * 59 + this.SterilizationMethods.GetHashCode();
                if (this.ContainsLatex != null)
                    hash = hash * 59 + this.ContainsLatex.GetHashCode();
                if (this.CombinationProduct != null)
                    hash = hash * 59 + this.CombinationProduct.GetHashCode();
                if (this.HCPCSInfo != null)
                    hash = hash * 59 + this.HCPCSInfo.GetHashCode();
                if (this.FDAProductInfo != null)
                    hash = hash * 59 + this.FDAProductInfo.GetHashCode();
                if (this.MRISafetyInfo != null)
                    hash = hash * 59 + this.MRISafetyInfo.GetHashCode();
                if (this.HumanCellTissue != null)
                    hash = hash * 59 + this.HumanCellTissue.GetHashCode();
                if (this.StorageInfo != null)
                    hash = hash * 59 + this.StorageInfo.GetHashCode();
                if (this.DeviceProperties != null)
                    hash = hash * 59 + this.DeviceProperties.GetHashCode();
                if (this.LabelerAlias != null)
                    hash = hash * 59 + this.LabelerAlias.GetHashCode();
                return hash;
            }
        }

    }

}
