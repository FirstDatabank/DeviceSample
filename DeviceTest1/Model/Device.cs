/*
 * FDB Device Services
 *
 * Web API for accessing medical device information
 *
 * OpenAPI spec version: 1.05
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace DeviceSample.Model
{
    /// <summary>
    /// Device
    /// </summary>
    [DataContract]
    public partial class Device : IEquatable<Device>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Device" /> class.
        /// </summary>
        /// <param name="PrizmId">PrizmId.</param>
        /// <param name="StandardDeviceName">StandardDeviceName.</param>
        /// <param name="EnhancedDeviceName">EnhancedDeviceName.</param>
        /// <param name="EnhancedDeviceNameLong">EnhancedDeviceNameLong.</param>
        /// <param name="BrandName">BrandName.</param>
        /// <param name="GUDIDBrandName">GUDIDBrandName.</param>
        /// <param name="GUDIDDescription">GUDIDDescription.</param>
        /// <param name="LabelerName">LabelerName.</param>
        /// <param name="UDI_DI">UDI_DI.</param>
        /// <param name="UDIDISecondary">UDIDISecondary.</param>
        /// <param name="GTIN14">GTIN14.</param>
        /// <param name="HIBC">HIBC.</param>
        /// <param name="ISBT128">ISBT128.</param>
        /// <param name="DeviceIdentifiers">DeviceIdentifiers.</param>
        /// <param name="GUDIDVersionModelNumber">GUDIDVersionModelNumber.</param>
        /// <param name="VersionNumber">VersionNumber.</param>
        /// <param name="ModelNumber">ModelNumber.</param>
        /// <param name="CatalogNumber">CatalogNumber.</param>
        /// <param name="SizeInfo">SizeInfo.</param>
        /// <param name="BasePackageType">BasePackageType.</param>
        /// <param name="BasePackageTypeCode">BasePackageTypeCode.</param>
        /// <param name="BasePackageCount">BasePackageCount.</param>
        /// <param name="PackageInfo">PackageInfo.</param>
        /// <param name="DeviceCategories">DeviceCategories.</param>
        /// <param name="StatusId">StatusId.</param>
        /// <param name="StatusDesc">StatusDesc.</param>
        /// <param name="LotNumberControlCode">LotNumberControlCode.</param>
        /// <param name="SerialNumberControlCode">SerialNumberControlCode.</param>
        /// <param name="ExpirationDateControlCode">ExpirationDateControlCode.</param>
        /// <param name="ManufacturedDateControlCode">ManufacturedDateControlCode.</param>
        /// <param name="DonationIdNumberControlCode">DonationIdNumberControlCode.</param>
        /// <param name="AlternateLabelerNames">AlternateLabelerNames.</param>
        /// <param name="LabelerContactInfo">LabelerContactInfo.</param>
        /// <param name="UDIDIPublishDate">UDIDIPublishDate.</param>
        /// <param name="PrizmPublishDate">PrizmPublishDate.</param>
        /// <param name="PrizmRevisionDate">PrizmRevisionDate.</param>
        /// <param name="Prescription">Prescription.</param>
        /// <param name="OverTheCounter">OverTheCounter.</param>
        /// <param name="DeviceIsAKit">DeviceIsAKit.</param>
        /// <param name="SingleUse">SingleUse.</param>
        /// <param name="PackagedSterile">PackagedSterile.</param>
        /// <param name="RequiresSterilizationPriorUse">RequiresSterilizationPriorUse.</param>
        /// <param name="SterilizationMethods">SterilizationMethods.</param>
        /// <param name="ContainsLatex">ContainsLatex.</param>
        /// <param name="CombinationProduct">CombinationProduct.</param>
        /// <param name="HCPCSInfo">HCPCSInfo.</param>
        /// <param name="FDAProductInfo">FDAProductInfo.</param>
        /// <param name="MRISafetyInfo">MRISafetyInfo.</param>
        /// <param name="HumanCellTissue">HumanCellTissue.</param>
        /// <param name="StorageInfo">StorageInfo.</param>
        /// <param name="DeviceProperties">DeviceProperties.</param>
        /// <param name="LabelerAliases">LabelerAliases.</param>
        /// <param name="AlternateDeviceNames">AlternateDeviceNames.</param>
        public Device(int? PrizmId = default(int?), string StandardDeviceName = default(string), string EnhancedDeviceName = default(string), string EnhancedDeviceNameLong = default(string), string BrandName = default(string), string GUDIDBrandName = default(string), string GUDIDDescription = default(string), string LabelerName = default(string), string UDI_DI = default(string), string UDIDISecondary = default(string), string GTIN14 = default(string), string HIBC = default(string), string ISBT128 = default(string), List<DeviceIdentifier> DeviceIdentifiers = default(List<DeviceIdentifier>), string GUDIDVersionModelNumber = default(string), string VersionNumber = default(string), string ModelNumber = default(string), List<string> CatalogNumber = default(List<string>), List<SizeInfo> SizeInfo = default(List<SizeInfo>), string BasePackageType = default(string), string BasePackageTypeCode = default(string), string BasePackageCount = default(string), List<PackageInfo> PackageInfo = default(List<PackageInfo>), List<DeviceCategory> DeviceCategories = default(List<DeviceCategory>), int? StatusId = default(int?), string StatusDesc = default(string), int? LotNumberControlCode = default(int?), int? SerialNumberControlCode = default(int?), int? ExpirationDateControlCode = default(int?), int? ManufacturedDateControlCode = default(int?), int? DonationIdNumberControlCode = default(int?), List<string> AlternateLabelerNames = default(List<string>), List<LabelerContact> LabelerContactInfo = default(List<LabelerContact>), string UDIDIPublishDate = default(string), string PrizmPublishDate = default(string), string PrizmRevisionDate = default(string), bool? Prescription = default(bool?), bool? OverTheCounter = default(bool?), bool? DeviceIsAKit = default(bool?), bool? SingleUse = default(bool?), bool? PackagedSterile = default(bool?), bool? RequiresSterilizationPriorUse = default(bool?), List<string> SterilizationMethods = default(List<string>), bool? ContainsLatex = default(bool?), bool? CombinationProduct = default(bool?), List<HCPCSInfo> HCPCSInfo = default(List<HCPCSInfo>), List<FDAProductInfo> FDAProductInfo = default(List<FDAProductInfo>), List<MRISafetyInfo> MRISafetyInfo = default(List<MRISafetyInfo>), bool? HumanCellTissue = default(bool?), List<StorageInfo> StorageInfo = default(List<StorageInfo>), List<DeviceProperty> DeviceProperties = default(List<DeviceProperty>), List<string> LabelerAliases = default(List<string>), List<string> AlternateDeviceNames = default(List<string>))
        {
            this.PrizmId = PrizmId;
            this.StandardDeviceName = StandardDeviceName;
            this.EnhancedDeviceName = EnhancedDeviceName;
            this.EnhancedDeviceNameLong = EnhancedDeviceNameLong;
            this.BrandName = BrandName;
            this.GUDIDBrandName = GUDIDBrandName;
            this.GUDIDDescription = GUDIDDescription;
            this.LabelerName = LabelerName;
            this.UDI_DI = UDI_DI;
            this.UDIDISecondary = UDIDISecondary;
            this.GTIN14 = GTIN14;
            this.HIBC = HIBC;
            this.ISBT128 = ISBT128;
            this.DeviceIdentifiers = DeviceIdentifiers;
            this.GUDIDVersionModelNumber = GUDIDVersionModelNumber;
            this.VersionNumber = VersionNumber;
            this.ModelNumber = ModelNumber;
            this.CatalogNumber = CatalogNumber;
            this.SizeInfo = SizeInfo;
            this.BasePackageType = BasePackageType;
            this.BasePackageTypeCode = BasePackageTypeCode;
            this.BasePackageCount = BasePackageCount;
            this.PackageInfo = PackageInfo;
            this.DeviceCategories = DeviceCategories;
            this.StatusId = StatusId;
            this.StatusDesc = StatusDesc;
            this.LotNumberControlCode = LotNumberControlCode;
            this.SerialNumberControlCode = SerialNumberControlCode;
            this.ExpirationDateControlCode = ExpirationDateControlCode;
            this.ManufacturedDateControlCode = ManufacturedDateControlCode;
            this.DonationIdNumberControlCode = DonationIdNumberControlCode;
            this.AlternateLabelerNames = AlternateLabelerNames;
            this.LabelerContactInfo = LabelerContactInfo;
            this.UDIDIPublishDate = UDIDIPublishDate;
            this.PrizmPublishDate = PrizmPublishDate;
            this.PrizmRevisionDate = PrizmRevisionDate;
            this.Prescription = Prescription;
            this.OverTheCounter = OverTheCounter;
            this.DeviceIsAKit = DeviceIsAKit;
            this.SingleUse = SingleUse;
            this.PackagedSterile = PackagedSterile;
            this.RequiresSterilizationPriorUse = RequiresSterilizationPriorUse;
            this.SterilizationMethods = SterilizationMethods;
            this.ContainsLatex = ContainsLatex;
            this.CombinationProduct = CombinationProduct;
            this.HCPCSInfo = HCPCSInfo;
            this.FDAProductInfo = FDAProductInfo;
            this.MRISafetyInfo = MRISafetyInfo;
            this.HumanCellTissue = HumanCellTissue;
            this.StorageInfo = StorageInfo;
            this.DeviceProperties = DeviceProperties;
            this.LabelerAliases = LabelerAliases;
            this.AlternateDeviceNames = AlternateDeviceNames;
        }

        /// <summary>
        /// Gets or Sets PrizmId
        /// </summary>
        [DataMember(Name = "PrizmId", EmitDefaultValue = false)]
        public int? PrizmId { get; set; }

        /// <summary>
        /// Gets or Sets StandardDeviceName
        /// </summary>
        [DataMember(Name = "StandardDeviceName", EmitDefaultValue = false)]
        public string StandardDeviceName { get; set; }

        /// <summary>
        /// Gets or Sets EnhancedDeviceName
        /// </summary>
        [DataMember(Name = "EnhancedDeviceName", EmitDefaultValue = false)]
        public string EnhancedDeviceName { get; set; }

        /// <summary>
        /// Gets or Sets EnhancedDeviceNameLong
        /// </summary>
        [DataMember(Name = "EnhancedDeviceNameLong", EmitDefaultValue = false)]
        public string EnhancedDeviceNameLong { get; set; }

        /// <summary>
        /// Gets or Sets BrandName
        /// </summary>
        [DataMember(Name = "BrandName", EmitDefaultValue = false)]
        public string BrandName { get; set; }

        /// <summary>
        /// Gets or Sets GUDIDBrandName
        /// </summary>
        [DataMember(Name = "GUDIDBrandName", EmitDefaultValue = false)]
        public string GUDIDBrandName { get; set; }

        /// <summary>
        /// Gets or Sets GUDIDDescription
        /// </summary>
        [DataMember(Name = "GUDIDDescription", EmitDefaultValue = false)]
        public string GUDIDDescription { get; set; }

        /// <summary>
        /// Gets or Sets LabelerName
        /// </summary>
        [DataMember(Name = "LabelerName", EmitDefaultValue = false)]
        public string LabelerName { get; set; }

        /// <summary>
        /// Gets or Sets UDI_DI
        /// </summary>
        [DataMember(Name = "UDI_DI", EmitDefaultValue = false)]
        public string UDI_DI { get; set; }

        /// <summary>
        /// Gets or Sets UDIDISecondary
        /// </summary>
        [DataMember(Name = "UDI_DI_Secondary", EmitDefaultValue = false)]
        public string UDIDISecondary { get; set; }

        /// <summary>
        /// Gets or Sets GTIN14
        /// </summary>
        [DataMember(Name = "GTIN_14", EmitDefaultValue = false)]
        public string GTIN14 { get; set; }

        /// <summary>
        /// Gets or Sets HIBC
        /// </summary>
        [DataMember(Name = "HIBC", EmitDefaultValue = false)]
        public string HIBC { get; set; }

        /// <summary>
        /// Gets or Sets ISBT128
        /// </summary>
        [DataMember(Name = "ISBT_128", EmitDefaultValue = false)]
        public string ISBT128 { get; set; }

        /// <summary>
        /// Gets or Sets DeviceIdentifiers
        /// </summary>
        [DataMember(Name = "DeviceIdentifiers", EmitDefaultValue = false)]
        public List<DeviceIdentifier> DeviceIdentifiers { get; set; }

        /// <summary>
        /// Gets or Sets GUDIDVersionModelNumber
        /// </summary>
        [DataMember(Name = "GUDIDVersionModelNumber", EmitDefaultValue = false)]
        public string GUDIDVersionModelNumber { get; set; }

        /// <summary>
        /// Gets or Sets VersionNumber
        /// </summary>
        [DataMember(Name = "VersionNumber", EmitDefaultValue = false)]
        public string VersionNumber { get; set; }

        /// <summary>
        /// Gets or Sets ModelNumber
        /// </summary>
        [DataMember(Name = "ModelNumber", EmitDefaultValue = false)]
        public string ModelNumber { get; set; }

        /// <summary>
        /// Gets or Sets CatalogNumber
        /// </summary>
        [DataMember(Name = "CatalogNumber", EmitDefaultValue = false)]
        public List<string> CatalogNumber { get; set; }

        /// <summary>
        /// Gets or Sets SizeInfo
        /// </summary>
        [DataMember(Name = "SizeInfo", EmitDefaultValue = false)]
        public List<SizeInfo> SizeInfo { get; set; }

        /// <summary>
        /// Gets or Sets BasePackageType
        /// </summary>
        [DataMember(Name = "BasePackageType", EmitDefaultValue = false)]
        public string BasePackageType { get; set; }

        /// <summary>
        /// Gets or Sets BasePackageTypeCode
        /// </summary>
        [DataMember(Name = "BasePackageTypeCode", EmitDefaultValue = false)]
        public string BasePackageTypeCode { get; set; }

        /// <summary>
        /// Gets or Sets BasePackageCount
        /// </summary>
        [DataMember(Name = "BasePackageCount", EmitDefaultValue = false)]
        public string BasePackageCount { get; set; }

        /// <summary>
        /// Gets or Sets PackageInfo
        /// </summary>
        [DataMember(Name = "PackageInfo", EmitDefaultValue = false)]
        public List<PackageInfo> PackageInfo { get; set; }

        /// <summary>
        /// Gets or Sets DeviceCategories
        /// </summary>
        [DataMember(Name = "DeviceCategories", EmitDefaultValue = false)]
        public List<DeviceCategory> DeviceCategories { get; set; }

        /// <summary>
        /// Gets or Sets StatusId
        /// </summary>
        [DataMember(Name = "StatusId", EmitDefaultValue = false)]
        public int? StatusId { get; set; }

        /// <summary>
        /// Gets or Sets StatusDesc
        /// </summary>
        [DataMember(Name = "StatusDesc", EmitDefaultValue = false)]
        public string StatusDesc { get; set; }

        /// <summary>
        /// Gets or Sets LotNumberControlCode
        /// </summary>
        [DataMember(Name = "LotNumberControlCode", EmitDefaultValue = false)]
        public int? LotNumberControlCode { get; set; }

        /// <summary>
        /// Gets or Sets SerialNumberControlCode
        /// </summary>
        [DataMember(Name = "SerialNumberControlCode", EmitDefaultValue = false)]
        public int? SerialNumberControlCode { get; set; }

        /// <summary>
        /// Gets or Sets ExpirationDateControlCode
        /// </summary>
        [DataMember(Name = "ExpirationDateControlCode", EmitDefaultValue = false)]
        public int? ExpirationDateControlCode { get; set; }

        /// <summary>
        /// Gets or Sets ManufacturedDateControlCode
        /// </summary>
        [DataMember(Name = "ManufacturedDateControlCode", EmitDefaultValue = false)]
        public int? ManufacturedDateControlCode { get; set; }

        /// <summary>
        /// Gets or Sets DonationIdNumberControlCode
        /// </summary>
        [DataMember(Name = "DonationIdNumberControlCode", EmitDefaultValue = false)]
        public int? DonationIdNumberControlCode { get; set; }

        /// <summary>
        /// Gets or Sets AlternateLabelerNames
        /// </summary>
        [DataMember(Name = "AlternateLabelerNames", EmitDefaultValue = false)]
        public List<string> AlternateLabelerNames { get; set; }

        /// <summary>
        /// Gets or Sets LabelerContactInfo
        /// </summary>
        [DataMember(Name = "LabelerContactInfo", EmitDefaultValue = false)]
        public List<LabelerContact> LabelerContactInfo { get; set; }

        /// <summary>
        /// Gets or Sets UDIDIPublishDate
        /// </summary>
        [DataMember(Name = "UDI_DIPublishDate", EmitDefaultValue = false)]
        public string UDIDIPublishDate { get; set; }

        /// <summary>
        /// Gets or Sets PrizmPublishDate
        /// </summary>
        [DataMember(Name = "PrizmPublishDate", EmitDefaultValue = false)]
        public string PrizmPublishDate { get; set; }

        /// <summary>
        /// Gets or Sets PrizmRevisionDate
        /// </summary>
        [DataMember(Name = "PrizmRevisionDate", EmitDefaultValue = false)]
        public string PrizmRevisionDate { get; set; }

        /// <summary>
        /// Gets or Sets Prescription
        /// </summary>
        [DataMember(Name = "Prescription", EmitDefaultValue = false)]
        public bool? Prescription { get; set; }

        /// <summary>
        /// Gets or Sets OverTheCounter
        /// </summary>
        [DataMember(Name = "OverTheCounter", EmitDefaultValue = false)]
        public bool? OverTheCounter { get; set; }

        /// <summary>
        /// Gets or Sets DeviceIsAKit
        /// </summary>
        [DataMember(Name = "DeviceIsAKit", EmitDefaultValue = false)]
        public bool? DeviceIsAKit { get; set; }

        /// <summary>
        /// Gets or Sets SingleUse
        /// </summary>
        [DataMember(Name = "SingleUse", EmitDefaultValue = false)]
        public bool? SingleUse { get; set; }

        /// <summary>
        /// Gets or Sets PackagedSterile
        /// </summary>
        [DataMember(Name = "PackagedSterile", EmitDefaultValue = false)]
        public bool? PackagedSterile { get; set; }

        /// <summary>
        /// Gets or Sets RequiresSterilizationPriorUse
        /// </summary>
        [DataMember(Name = "RequiresSterilizationPriorUse", EmitDefaultValue = false)]
        public bool? RequiresSterilizationPriorUse { get; set; }

        /// <summary>
        /// Gets or Sets SterilizationMethods
        /// </summary>
        [DataMember(Name = "SterilizationMethods", EmitDefaultValue = false)]
        public List<string> SterilizationMethods { get; set; }

        /// <summary>
        /// Gets or Sets ContainsLatex
        /// </summary>
        [DataMember(Name = "ContainsLatex", EmitDefaultValue = false)]
        public bool? ContainsLatex { get; set; }

        /// <summary>
        /// Gets or Sets CombinationProduct
        /// </summary>
        [DataMember(Name = "CombinationProduct", EmitDefaultValue = false)]
        public bool? CombinationProduct { get; set; }

        /// <summary>
        /// Gets or Sets HCPCSInfo
        /// </summary>
        [DataMember(Name = "HCPCSInfo", EmitDefaultValue = false)]
        public List<HCPCSInfo> HCPCSInfo { get; set; }

        /// <summary>
        /// Gets or Sets FDAProductInfo
        /// </summary>
        [DataMember(Name = "FDAProductInfo", EmitDefaultValue = false)]
        public List<FDAProductInfo> FDAProductInfo { get; set; }

        /// <summary>
        /// Gets or Sets MRISafetyInfo
        /// </summary>
        [DataMember(Name = "MRISafetyInfo", EmitDefaultValue = false)]
        public List<MRISafetyInfo> MRISafetyInfo { get; set; }

        /// <summary>
        /// Gets or Sets HumanCellTissue
        /// </summary>
        [DataMember(Name = "HumanCellTissue", EmitDefaultValue = false)]
        public bool? HumanCellTissue { get; set; }

        /// <summary>
        /// Gets or Sets StorageInfo
        /// </summary>
        [DataMember(Name = "StorageInfo", EmitDefaultValue = false)]
        public List<StorageInfo> StorageInfo { get; set; }

        /// <summary>
        /// Gets or Sets DeviceProperties
        /// </summary>
        [DataMember(Name = "DeviceProperties", EmitDefaultValue = false)]
        public List<DeviceProperty> DeviceProperties { get; set; }

        /// <summary>
        /// Gets or Sets LabelerAliases
        /// </summary>
        [DataMember(Name = "LabelerAliases", EmitDefaultValue = false)]
        public List<string> LabelerAliases { get; set; }

        /// <summary>
        /// Gets or Sets AlternateDeviceNames
        /// </summary>
        [DataMember(Name = "AlternateDeviceNames", EmitDefaultValue = false)]
        public List<string> AlternateDeviceNames { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Device {\n");
            sb.Append("  PrizmId: ").Append(PrizmId).Append("\n");
            sb.Append("  StandardDeviceName: ").Append(StandardDeviceName).Append("\n");
            sb.Append("  EnhancedDeviceName: ").Append(EnhancedDeviceName).Append("\n");
            sb.Append("  EnhancedDeviceNameLong: ").Append(EnhancedDeviceNameLong).Append("\n");
            sb.Append("  BrandName: ").Append(BrandName).Append("\n");
            sb.Append("  GUDIDBrandName: ").Append(GUDIDBrandName).Append("\n");
            sb.Append("  GUDIDDescription: ").Append(GUDIDDescription).Append("\n");
            sb.Append("  LabelerName: ").Append(LabelerName).Append("\n");
            sb.Append("  UDI_DI: ").Append(UDI_DI).Append("\n");
            sb.Append("  UDIDISecondary: ").Append(UDIDISecondary).Append("\n");
            sb.Append("  GTIN14: ").Append(GTIN14).Append("\n");
            sb.Append("  HIBC: ").Append(HIBC).Append("\n");
            sb.Append("  ISBT128: ").Append(ISBT128).Append("\n");
            sb.Append("  DeviceIdentifiers: ").Append(DeviceIdentifiers).Append("\n");
            sb.Append("  GUDIDVersionModelNumber: ").Append(GUDIDVersionModelNumber).Append("\n");
            sb.Append("  VersionNumber: ").Append(VersionNumber).Append("\n");
            sb.Append("  ModelNumber: ").Append(ModelNumber).Append("\n");
            sb.Append("  CatalogNumber: ").Append(CatalogNumber).Append("\n");
            sb.Append("  SizeInfo: ").Append(SizeInfo).Append("\n");
            sb.Append("  BasePackageType: ").Append(BasePackageType).Append("\n");
            sb.Append("  BasePackageTypeCode: ").Append(BasePackageTypeCode).Append("\n");
            sb.Append("  BasePackageCount: ").Append(BasePackageCount).Append("\n");
            sb.Append("  PackageInfo: ").Append(PackageInfo).Append("\n");
            sb.Append("  DeviceCategories: ").Append(DeviceCategories).Append("\n");
            sb.Append("  StatusId: ").Append(StatusId).Append("\n");
            sb.Append("  StatusDesc: ").Append(StatusDesc).Append("\n");
            sb.Append("  LotNumberControlCode: ").Append(LotNumberControlCode).Append("\n");
            sb.Append("  SerialNumberControlCode: ").Append(SerialNumberControlCode).Append("\n");
            sb.Append("  ExpirationDateControlCode: ").Append(ExpirationDateControlCode).Append("\n");
            sb.Append("  ManufacturedDateControlCode: ").Append(ManufacturedDateControlCode).Append("\n");
            sb.Append("  DonationIdNumberControlCode: ").Append(DonationIdNumberControlCode).Append("\n");
            sb.Append("  AlternateLabelerNames: ").Append(AlternateLabelerNames).Append("\n");
            sb.Append("  LabelerContactInfo: ").Append(LabelerContactInfo).Append("\n");
            sb.Append("  UDIDIPublishDate: ").Append(UDIDIPublishDate).Append("\n");
            sb.Append("  PrizmPublishDate: ").Append(PrizmPublishDate).Append("\n");
            sb.Append("  PrizmRevisionDate: ").Append(PrizmRevisionDate).Append("\n");
            sb.Append("  Prescription: ").Append(Prescription).Append("\n");
            sb.Append("  OverTheCounter: ").Append(OverTheCounter).Append("\n");
            sb.Append("  DeviceIsAKit: ").Append(DeviceIsAKit).Append("\n");
            sb.Append("  SingleUse: ").Append(SingleUse).Append("\n");
            sb.Append("  PackagedSterile: ").Append(PackagedSterile).Append("\n");
            sb.Append("  RequiresSterilizationPriorUse: ").Append(RequiresSterilizationPriorUse).Append("\n");
            sb.Append("  SterilizationMethods: ").Append(SterilizationMethods).Append("\n");
            sb.Append("  ContainsLatex: ").Append(ContainsLatex).Append("\n");
            sb.Append("  CombinationProduct: ").Append(CombinationProduct).Append("\n");
            sb.Append("  HCPCSInfo: ").Append(HCPCSInfo).Append("\n");
            sb.Append("  FDAProductInfo: ").Append(FDAProductInfo).Append("\n");
            sb.Append("  MRISafetyInfo: ").Append(MRISafetyInfo).Append("\n");
            sb.Append("  HumanCellTissue: ").Append(HumanCellTissue).Append("\n");
            sb.Append("  StorageInfo: ").Append(StorageInfo).Append("\n");
            sb.Append("  DeviceProperties: ").Append(DeviceProperties).Append("\n");
            sb.Append("  LabelerAliases: ").Append(LabelerAliases).Append("\n");
            sb.Append("  AlternateDeviceNames: ").Append(AlternateDeviceNames).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Device);
        }

        /// <summary>
        /// Returns true if Device instances are equal
        /// </summary>
        /// <param name="other">Instance of Device to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Device other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return
                (
                    this.PrizmId == other.PrizmId ||
                    this.PrizmId != null &&
                    this.PrizmId.Equals(other.PrizmId)
                ) &&
                (
                    this.StandardDeviceName == other.StandardDeviceName ||
                    this.StandardDeviceName != null &&
                    this.StandardDeviceName.Equals(other.StandardDeviceName)
                ) &&
                (
                    this.EnhancedDeviceName == other.EnhancedDeviceName ||
                    this.EnhancedDeviceName != null &&
                    this.EnhancedDeviceName.Equals(other.EnhancedDeviceName)
                ) &&
                (
                    this.EnhancedDeviceNameLong == other.EnhancedDeviceNameLong ||
                    this.EnhancedDeviceNameLong != null &&
                    this.EnhancedDeviceNameLong.Equals(other.EnhancedDeviceNameLong)
                ) &&
                (
                    this.BrandName == other.BrandName ||
                    this.BrandName != null &&
                    this.BrandName.Equals(other.BrandName)
                ) &&
                (
                    this.GUDIDBrandName == other.GUDIDBrandName ||
                    this.GUDIDBrandName != null &&
                    this.GUDIDBrandName.Equals(other.GUDIDBrandName)
                ) &&
                (
                    this.GUDIDDescription == other.GUDIDDescription ||
                    this.GUDIDDescription != null &&
                    this.GUDIDDescription.Equals(other.GUDIDDescription)
                ) &&
                (
                    this.LabelerName == other.LabelerName ||
                    this.LabelerName != null &&
                    this.LabelerName.Equals(other.LabelerName)
                ) &&
                (
                    this.UDI_DI == other.UDI_DI ||
                    this.UDI_DI != null &&
                    this.UDI_DI.Equals(other.UDI_DI)
                ) &&
                (
                    this.UDIDISecondary == other.UDIDISecondary ||
                    this.UDIDISecondary != null &&
                    this.UDIDISecondary.Equals(other.UDIDISecondary)
                ) &&
                (
                    this.GTIN14 == other.GTIN14 ||
                    this.GTIN14 != null &&
                    this.GTIN14.Equals(other.GTIN14)
                ) &&
                (
                    this.HIBC == other.HIBC ||
                    this.HIBC != null &&
                    this.HIBC.Equals(other.HIBC)
                ) &&
                (
                    this.ISBT128 == other.ISBT128 ||
                    this.ISBT128 != null &&
                    this.ISBT128.Equals(other.ISBT128)
                ) &&
                (
                    this.DeviceIdentifiers == other.DeviceIdentifiers ||
                    this.DeviceIdentifiers != null &&
                    this.DeviceIdentifiers.SequenceEqual(other.DeviceIdentifiers)
                ) &&
                (
                    this.GUDIDVersionModelNumber == other.GUDIDVersionModelNumber ||
                    this.GUDIDVersionModelNumber != null &&
                    this.GUDIDVersionModelNumber.Equals(other.GUDIDVersionModelNumber)
                ) &&
                (
                    this.VersionNumber == other.VersionNumber ||
                    this.VersionNumber != null &&
                    this.VersionNumber.Equals(other.VersionNumber)
                ) &&
                (
                    this.ModelNumber == other.ModelNumber ||
                    this.ModelNumber != null &&
                    this.ModelNumber.Equals(other.ModelNumber)
                ) &&
                (
                    this.CatalogNumber == other.CatalogNumber ||
                    this.CatalogNumber != null &&
                    this.CatalogNumber.SequenceEqual(other.CatalogNumber)
                ) &&
                (
                    this.SizeInfo == other.SizeInfo ||
                    this.SizeInfo != null &&
                    this.SizeInfo.SequenceEqual(other.SizeInfo)
                ) &&
                (
                    this.BasePackageType == other.BasePackageType ||
                    this.BasePackageType != null &&
                    this.BasePackageType.Equals(other.BasePackageType)
                ) &&
                (
                    this.BasePackageTypeCode == other.BasePackageTypeCode ||
                    this.BasePackageTypeCode != null &&
                    this.BasePackageTypeCode.Equals(other.BasePackageTypeCode)
                ) &&
                (
                    this.BasePackageCount == other.BasePackageCount ||
                    this.BasePackageCount != null &&
                    this.BasePackageCount.Equals(other.BasePackageCount)
                ) &&
                (
                    this.PackageInfo == other.PackageInfo ||
                    this.PackageInfo != null &&
                    this.PackageInfo.SequenceEqual(other.PackageInfo)
                ) &&
                (
                    this.DeviceCategories == other.DeviceCategories ||
                    this.DeviceCategories != null &&
                    this.DeviceCategories.SequenceEqual(other.DeviceCategories)
                ) &&
                (
                    this.StatusId == other.StatusId ||
                    this.StatusId != null &&
                    this.StatusId.Equals(other.StatusId)
                ) &&
                (
                    this.StatusDesc == other.StatusDesc ||
                    this.StatusDesc != null &&
                    this.StatusDesc.Equals(other.StatusDesc)
                ) &&
                (
                    this.LotNumberControlCode == other.LotNumberControlCode ||
                    this.LotNumberControlCode != null &&
                    this.LotNumberControlCode.Equals(other.LotNumberControlCode)
                ) &&
                (
                    this.SerialNumberControlCode == other.SerialNumberControlCode ||
                    this.SerialNumberControlCode != null &&
                    this.SerialNumberControlCode.Equals(other.SerialNumberControlCode)
                ) &&
                (
                    this.ExpirationDateControlCode == other.ExpirationDateControlCode ||
                    this.ExpirationDateControlCode != null &&
                    this.ExpirationDateControlCode.Equals(other.ExpirationDateControlCode)
                ) &&
                (
                    this.ManufacturedDateControlCode == other.ManufacturedDateControlCode ||
                    this.ManufacturedDateControlCode != null &&
                    this.ManufacturedDateControlCode.Equals(other.ManufacturedDateControlCode)
                ) &&
                (
                    this.DonationIdNumberControlCode == other.DonationIdNumberControlCode ||
                    this.DonationIdNumberControlCode != null &&
                    this.DonationIdNumberControlCode.Equals(other.DonationIdNumberControlCode)
                ) &&
                (
                    this.AlternateLabelerNames == other.AlternateLabelerNames ||
                    this.AlternateLabelerNames != null &&
                    this.AlternateLabelerNames.SequenceEqual(other.AlternateLabelerNames)
                ) &&
                (
                    this.LabelerContactInfo == other.LabelerContactInfo ||
                    this.LabelerContactInfo != null &&
                    this.LabelerContactInfo.SequenceEqual(other.LabelerContactInfo)
                ) &&
                (
                    this.UDIDIPublishDate == other.UDIDIPublishDate ||
                    this.UDIDIPublishDate != null &&
                    this.UDIDIPublishDate.Equals(other.UDIDIPublishDate)
                ) &&
                (
                    this.PrizmPublishDate == other.PrizmPublishDate ||
                    this.PrizmPublishDate != null &&
                    this.PrizmPublishDate.Equals(other.PrizmPublishDate)
                ) &&
                (
                    this.PrizmRevisionDate == other.PrizmRevisionDate ||
                    this.PrizmRevisionDate != null &&
                    this.PrizmRevisionDate.Equals(other.PrizmRevisionDate)
                ) &&
                (
                    this.Prescription == other.Prescription ||
                    this.Prescription != null &&
                    this.Prescription.Equals(other.Prescription)
                ) &&
                (
                    this.OverTheCounter == other.OverTheCounter ||
                    this.OverTheCounter != null &&
                    this.OverTheCounter.Equals(other.OverTheCounter)
                ) &&
                (
                    this.DeviceIsAKit == other.DeviceIsAKit ||
                    this.DeviceIsAKit != null &&
                    this.DeviceIsAKit.Equals(other.DeviceIsAKit)
                ) &&
                (
                    this.SingleUse == other.SingleUse ||
                    this.SingleUse != null &&
                    this.SingleUse.Equals(other.SingleUse)
                ) &&
                (
                    this.PackagedSterile == other.PackagedSterile ||
                    this.PackagedSterile != null &&
                    this.PackagedSterile.Equals(other.PackagedSterile)
                ) &&
                (
                    this.RequiresSterilizationPriorUse == other.RequiresSterilizationPriorUse ||
                    this.RequiresSterilizationPriorUse != null &&
                    this.RequiresSterilizationPriorUse.Equals(other.RequiresSterilizationPriorUse)
                ) &&
                (
                    this.SterilizationMethods == other.SterilizationMethods ||
                    this.SterilizationMethods != null &&
                    this.SterilizationMethods.SequenceEqual(other.SterilizationMethods)
                ) &&
                (
                    this.ContainsLatex == other.ContainsLatex ||
                    this.ContainsLatex != null &&
                    this.ContainsLatex.Equals(other.ContainsLatex)
                ) &&
                (
                    this.CombinationProduct == other.CombinationProduct ||
                    this.CombinationProduct != null &&
                    this.CombinationProduct.Equals(other.CombinationProduct)
                ) &&
                (
                    this.HCPCSInfo == other.HCPCSInfo ||
                    this.HCPCSInfo != null &&
                    this.HCPCSInfo.SequenceEqual(other.HCPCSInfo)
                ) &&
                (
                    this.FDAProductInfo == other.FDAProductInfo ||
                    this.FDAProductInfo != null &&
                    this.FDAProductInfo.SequenceEqual(other.FDAProductInfo)
                ) &&
                (
                    this.MRISafetyInfo == other.MRISafetyInfo ||
                    this.MRISafetyInfo != null &&
                    this.MRISafetyInfo.SequenceEqual(other.MRISafetyInfo)
                ) &&
                (
                    this.HumanCellTissue == other.HumanCellTissue ||
                    this.HumanCellTissue != null &&
                    this.HumanCellTissue.Equals(other.HumanCellTissue)
                ) &&
                (
                    this.StorageInfo == other.StorageInfo ||
                    this.StorageInfo != null &&
                    this.StorageInfo.SequenceEqual(other.StorageInfo)
                ) &&
                (
                    this.DeviceProperties == other.DeviceProperties ||
                    this.DeviceProperties != null &&
                    this.DeviceProperties.SequenceEqual(other.DeviceProperties)
                ) &&
                (
                    this.LabelerAliases == other.LabelerAliases ||
                    this.LabelerAliases != null &&
                    this.LabelerAliases.SequenceEqual(other.LabelerAliases)
                ) &&
                (
                    this.AlternateDeviceNames == other.AlternateDeviceNames ||
                    this.AlternateDeviceNames != null &&
                    this.AlternateDeviceNames.SequenceEqual(other.AlternateDeviceNames)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.PrizmId != null)
                    hash = hash * 59 + this.PrizmId.GetHashCode();
                if (this.StandardDeviceName != null)
                    hash = hash * 59 + this.StandardDeviceName.GetHashCode();
                if (this.EnhancedDeviceName != null)
                    hash = hash * 59 + this.EnhancedDeviceName.GetHashCode();
                if (this.EnhancedDeviceNameLong != null)
                    hash = hash * 59 + this.EnhancedDeviceNameLong.GetHashCode();
                if (this.BrandName != null)
                    hash = hash * 59 + this.BrandName.GetHashCode();
                if (this.GUDIDBrandName != null)
                    hash = hash * 59 + this.GUDIDBrandName.GetHashCode();
                if (this.GUDIDDescription != null)
                    hash = hash * 59 + this.GUDIDDescription.GetHashCode();
                if (this.LabelerName != null)
                    hash = hash * 59 + this.LabelerName.GetHashCode();
                if (this.UDI_DI != null)
                    hash = hash * 59 + this.UDI_DI.GetHashCode();
                if (this.UDIDISecondary != null)
                    hash = hash * 59 + this.UDIDISecondary.GetHashCode();
                if (this.GTIN14 != null)
                    hash = hash * 59 + this.GTIN14.GetHashCode();
                if (this.HIBC != null)
                    hash = hash * 59 + this.HIBC.GetHashCode();
                if (this.ISBT128 != null)
                    hash = hash * 59 + this.ISBT128.GetHashCode();
                if (this.DeviceIdentifiers != null)
                    hash = hash * 59 + this.DeviceIdentifiers.GetHashCode();
                if (this.GUDIDVersionModelNumber != null)
                    hash = hash * 59 + this.GUDIDVersionModelNumber.GetHashCode();
                if (this.VersionNumber != null)
                    hash = hash * 59 + this.VersionNumber.GetHashCode();
                if (this.ModelNumber != null)
                    hash = hash * 59 + this.ModelNumber.GetHashCode();
                if (this.CatalogNumber != null)
                    hash = hash * 59 + this.CatalogNumber.GetHashCode();
                if (this.SizeInfo != null)
                    hash = hash * 59 + this.SizeInfo.GetHashCode();
                if (this.BasePackageType != null)
                    hash = hash * 59 + this.BasePackageType.GetHashCode();
                if (this.BasePackageTypeCode != null)
                    hash = hash * 59 + this.BasePackageTypeCode.GetHashCode();
                if (this.BasePackageCount != null)
                    hash = hash * 59 + this.BasePackageCount.GetHashCode();
                if (this.PackageInfo != null)
                    hash = hash * 59 + this.PackageInfo.GetHashCode();
                if (this.DeviceCategories != null)
                    hash = hash * 59 + this.DeviceCategories.GetHashCode();
                if (this.StatusId != null)
                    hash = hash * 59 + this.StatusId.GetHashCode();
                if (this.StatusDesc != null)
                    hash = hash * 59 + this.StatusDesc.GetHashCode();
                if (this.LotNumberControlCode != null)
                    hash = hash * 59 + this.LotNumberControlCode.GetHashCode();
                if (this.SerialNumberControlCode != null)
                    hash = hash * 59 + this.SerialNumberControlCode.GetHashCode();
                if (this.ExpirationDateControlCode != null)
                    hash = hash * 59 + this.ExpirationDateControlCode.GetHashCode();
                if (this.ManufacturedDateControlCode != null)
                    hash = hash * 59 + this.ManufacturedDateControlCode.GetHashCode();
                if (this.DonationIdNumberControlCode != null)
                    hash = hash * 59 + this.DonationIdNumberControlCode.GetHashCode();
                if (this.AlternateLabelerNames != null)
                    hash = hash * 59 + this.AlternateLabelerNames.GetHashCode();
                if (this.LabelerContactInfo != null)
                    hash = hash * 59 + this.LabelerContactInfo.GetHashCode();
                if (this.UDIDIPublishDate != null)
                    hash = hash * 59 + this.UDIDIPublishDate.GetHashCode();
                if (this.PrizmPublishDate != null)
                    hash = hash * 59 + this.PrizmPublishDate.GetHashCode();
                if (this.PrizmRevisionDate != null)
                    hash = hash * 59 + this.PrizmRevisionDate.GetHashCode();
                if (this.Prescription != null)
                    hash = hash * 59 + this.Prescription.GetHashCode();
                if (this.OverTheCounter != null)
                    hash = hash * 59 + this.OverTheCounter.GetHashCode();
                if (this.DeviceIsAKit != null)
                    hash = hash * 59 + this.DeviceIsAKit.GetHashCode();
                if (this.SingleUse != null)
                    hash = hash * 59 + this.SingleUse.GetHashCode();
                if (this.PackagedSterile != null)
                    hash = hash * 59 + this.PackagedSterile.GetHashCode();
                if (this.RequiresSterilizationPriorUse != null)
                    hash = hash * 59 + this.RequiresSterilizationPriorUse.GetHashCode();
                if (this.SterilizationMethods != null)
                    hash = hash * 59 + this.SterilizationMethods.GetHashCode();
                if (this.ContainsLatex != null)
                    hash = hash * 59 + this.ContainsLatex.GetHashCode();
                if (this.CombinationProduct != null)
                    hash = hash * 59 + this.CombinationProduct.GetHashCode();
                if (this.HCPCSInfo != null)
                    hash = hash * 59 + this.HCPCSInfo.GetHashCode();
                if (this.FDAProductInfo != null)
                    hash = hash * 59 + this.FDAProductInfo.GetHashCode();
                if (this.MRISafetyInfo != null)
                    hash = hash * 59 + this.MRISafetyInfo.GetHashCode();
                if (this.HumanCellTissue != null)
                    hash = hash * 59 + this.HumanCellTissue.GetHashCode();
                if (this.StorageInfo != null)
                    hash = hash * 59 + this.StorageInfo.GetHashCode();
                if (this.DeviceProperties != null)
                    hash = hash * 59 + this.DeviceProperties.GetHashCode();
                if (this.LabelerAliases != null)
                    hash = hash * 59 + this.LabelerAliases.GetHashCode();
                if (this.AlternateDeviceNames != null)
                    hash = hash * 59 + this.AlternateDeviceNames.GetHashCode();
                return hash;
            }
        }
    }
}