/* 
 * FDB Device Services
 *
 * Web API for accessing medical device information
 *
 * OpenAPI spec version: 1.04
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace DeviceSample.Model
{
    /// <summary>
    /// Returns the package information of the device
    /// </summary>
    [DataContract]
    public partial class PackageInfo : IEquatable<PackageInfo>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PackageInfo" /> class.
        /// </summary>
        /// <param name="FDBPackageId">Returns FDB Packaged Identifier.</param>
        /// <param name="PackageQuantity">Returns the package quantity.</param>
        /// <param name="PackageTypeCode">Returns the package type code.</param>
        /// <param name="PackageTypeDesc">Returns the package type code description.</param>
        /// <param name="InnerFDBPackageId">Returns inner most FDB Package Id.</param>
        /// <param name="BaseFDBDeviceId">Returns base fdb device identifier.</param>
        /// <param name="PackageStatusId">Returns package status identifier.</param>
        /// <param name="PackageStatusDesc">Returns description of package status.</param>
        /// <param name="PackageIdentifiers">PackageIdentifiers.</param>
        public PackageInfo(int? FDBPackageId = null, string PackageQuantity = null, string PackageTypeCode = null, string PackageTypeDesc = null, int? InnerFDBPackageId = null, int? BaseFDBDeviceId = null, int? PackageStatusId = null, string PackageStatusDesc = null, List<PackageIdentifier> PackageIdentifiers = null)
        {
            this.FDBPackageId = FDBPackageId;
            this.PackageQuantity = PackageQuantity;
            this.PackageTypeCode = PackageTypeCode;
            this.PackageTypeDesc = PackageTypeDesc;
            this.InnerFDBPackageId = InnerFDBPackageId;
            this.BaseFDBDeviceId = BaseFDBDeviceId;
            this.PackageStatusId = PackageStatusId;
            this.PackageStatusDesc = PackageStatusDesc;
            this.PackageIdentifiers = PackageIdentifiers;
        }

        /// <summary>
        /// Returns FDB Packaged Identifier
        /// </summary>
        /// <value>Returns FDB Packaged Identifier</value>
        [DataMember(Name = "FDBPackageId", EmitDefaultValue = false)]
        public int? FDBPackageId { get; set; }
        /// <summary>
        /// Returns the package quantity
        /// </summary>
        /// <value>Returns the package quantity</value>
        [DataMember(Name = "PackageQuantity", EmitDefaultValue = false)]
        public string PackageQuantity { get; set; }
        /// <summary>
        /// Returns the package type code
        /// </summary>
        /// <value>Returns the package type code</value>
        [DataMember(Name = "PackageTypeCode", EmitDefaultValue = false)]
        public string PackageTypeCode { get; set; }
        /// <summary>
        /// Returns the package type code description
        /// </summary>
        /// <value>Returns the package type code description</value>
        [DataMember(Name = "PackageTypeDesc", EmitDefaultValue = false)]
        public string PackageTypeDesc { get; set; }
        /// <summary>
        /// Returns inner most FDB Package Id
        /// </summary>
        /// <value>Returns inner most FDB Package Id</value>
        [DataMember(Name = "InnerFDBPackageId", EmitDefaultValue = false)]
        public int? InnerFDBPackageId { get; set; }
        /// <summary>
        /// Returns base fdb device identifier
        /// </summary>
        /// <value>Returns base fdb device identifier</value>
        [DataMember(Name = "BaseFDBDeviceId", EmitDefaultValue = false)]
        public int? BaseFDBDeviceId { get; set; }
        /// <summary>
        /// Returns package status identifier
        /// </summary>
        /// <value>Returns package status identifier</value>
        [DataMember(Name = "PackageStatusId", EmitDefaultValue = false)]
        public int? PackageStatusId { get; set; }
        /// <summary>
        /// Returns description of package status
        /// </summary>
        /// <value>Returns description of package status</value>
        [DataMember(Name = "PackageStatusDesc", EmitDefaultValue = false)]
        public string PackageStatusDesc { get; set; }
        /// <summary>
        /// Gets or Sets PackageIdentifiers
        /// </summary>
        [DataMember(Name = "PackageIdentifiers", EmitDefaultValue = false)]
        public List<PackageIdentifier> PackageIdentifiers { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PackageInfo {\n");
            sb.Append("  FDBPackageId: ").Append(FDBPackageId).Append("\n");
            sb.Append("  PackageQuantity: ").Append(PackageQuantity).Append("\n");
            sb.Append("  PackageTypeCode: ").Append(PackageTypeCode).Append("\n");
            sb.Append("  PackageTypeDesc: ").Append(PackageTypeDesc).Append("\n");
            sb.Append("  InnerFDBPackageId: ").Append(InnerFDBPackageId).Append("\n");
            sb.Append("  BaseFDBDeviceId: ").Append(BaseFDBDeviceId).Append("\n");
            sb.Append("  PackageStatusId: ").Append(PackageStatusId).Append("\n");
            sb.Append("  PackageStatusDesc: ").Append(PackageStatusDesc).Append("\n");
            sb.Append("  PackageIdentifiers: ").Append(PackageIdentifiers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PackageInfo);
        }

        /// <summary>
        /// Returns true if PackageInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of PackageInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PackageInfo other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return
                (
                    this.FDBPackageId == other.FDBPackageId ||
                    this.FDBPackageId != null &&
                    this.FDBPackageId.Equals(other.FDBPackageId)
                ) &&
                (
                    this.PackageQuantity == other.PackageQuantity ||
                    this.PackageQuantity != null &&
                    this.PackageQuantity.Equals(other.PackageQuantity)
                ) &&
                (
                    this.PackageTypeCode == other.PackageTypeCode ||
                    this.PackageTypeCode != null &&
                    this.PackageTypeCode.Equals(other.PackageTypeCode)
                ) &&
                (
                    this.PackageTypeDesc == other.PackageTypeDesc ||
                    this.PackageTypeDesc != null &&
                    this.PackageTypeDesc.Equals(other.PackageTypeDesc)
                ) &&
                (
                    this.InnerFDBPackageId == other.InnerFDBPackageId ||
                    this.InnerFDBPackageId != null &&
                    this.InnerFDBPackageId.Equals(other.InnerFDBPackageId)
                ) &&
                (
                    this.BaseFDBDeviceId == other.BaseFDBDeviceId ||
                    this.BaseFDBDeviceId != null &&
                    this.BaseFDBDeviceId.Equals(other.BaseFDBDeviceId)
                ) &&
                (
                    this.PackageStatusId == other.PackageStatusId ||
                    this.PackageStatusId != null &&
                    this.PackageStatusId.Equals(other.PackageStatusId)
                ) &&
                (
                    this.PackageStatusDesc == other.PackageStatusDesc ||
                    this.PackageStatusDesc != null &&
                    this.PackageStatusDesc.Equals(other.PackageStatusDesc)
                ) &&
                (
                    this.PackageIdentifiers == other.PackageIdentifiers ||
                    this.PackageIdentifiers != null &&
                    this.PackageIdentifiers.SequenceEqual(other.PackageIdentifiers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.FDBPackageId != null)
                    hash = hash * 59 + this.FDBPackageId.GetHashCode();
                if (this.PackageQuantity != null)
                    hash = hash * 59 + this.PackageQuantity.GetHashCode();
                if (this.PackageTypeCode != null)
                    hash = hash * 59 + this.PackageTypeCode.GetHashCode();
                if (this.PackageTypeDesc != null)
                    hash = hash * 59 + this.PackageTypeDesc.GetHashCode();
                if (this.InnerFDBPackageId != null)
                    hash = hash * 59 + this.InnerFDBPackageId.GetHashCode();
                if (this.BaseFDBDeviceId != null)
                    hash = hash * 59 + this.BaseFDBDeviceId.GetHashCode();
                if (this.PackageStatusId != null)
                    hash = hash * 59 + this.PackageStatusId.GetHashCode();
                if (this.PackageStatusDesc != null)
                    hash = hash * 59 + this.PackageStatusDesc.GetHashCode();
                if (this.PackageIdentifiers != null)
                    hash = hash * 59 + this.PackageIdentifiers.GetHashCode();
                return hash;
            }
        }
    }

}
