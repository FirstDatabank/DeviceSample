/* 
 * FDB Device Services
 *
 * Web API for accessing medical device information
 *
 * OpenAPI spec version: 1.05
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace DeviceSample.Model
{
    /// <summary>
    /// Returns the list of packages for the device
    /// </summary>
    [DataContract]
    public partial class PackageInfo : IEquatable<PackageInfo>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PackageInfo" /> class.
        /// </summary>
        /// <param name="PrizmPackageId">Returns FDB package identifier.</param>
        /// <param name="PackageQuantity">Returns the quantity of how many package units are contained inside the package.</param>
        /// <param name="PackageTypeCode">Returns the package type code; e.g. BX, CT, CA.</param>
        /// <param name="PackageTypeDesc">Returns the package type code description; e.g. Box, Carton, Case.</param>
        /// <param name="InnerPrizmPackageId">Returns the FDB package identifier of what is inside the package.  If the package contains a quantity of base level devices, this value is Null..</param>
        /// <param name="BasePrizmId">Returns the innermost item (base level device) FDB device identifier.</param>
        /// <param name="PackageStatusId">Returns package status identifier of the package.  Possible values are 1 – Live, 2 – Replaced, 3 - Retired.</param>
        /// <param name="PackageStatusDesc">Returns description of package status of the package.  This is the description of PackageStatusId field. The possible  values are &#39;Live&#39;, &#39;Replaced&#39;, &#39;Retired&#39;.</param>
        /// <param name="PackageIdentifiers">Returns the external package identifier information for the package.</param>
        public PackageInfo(int? PrizmPackageId = default(int?), string PackageQuantity = default(string), string PackageTypeCode = default(string), string PackageTypeDesc = default(string), int? InnerPrizmPackageId = default(int?), int? BasePrizmId = default(int?), int? PackageStatusId = default(int?), string PackageStatusDesc = default(string), List<PackageIdentifier> PackageIdentifiers = default(List<PackageIdentifier>))
        {
            this.PrizmPackageId = PrizmPackageId;
            this.PackageQuantity = PackageQuantity;
            this.PackageTypeCode = PackageTypeCode;
            this.PackageTypeDesc = PackageTypeDesc;
            this.InnerPrizmPackageId = InnerPrizmPackageId;
            this.BasePrizmId = BasePrizmId;
            this.PackageStatusId = PackageStatusId;
            this.PackageStatusDesc = PackageStatusDesc;
            this.PackageIdentifiers = PackageIdentifiers;
        }

        /// <summary>
        /// Returns FDB package identifier
        /// </summary>
        /// <value>Returns FDB package identifier</value>
        [DataMember(Name = "PrizmPackageId", EmitDefaultValue = false)]
        public int? PrizmPackageId { get; set; }
        /// <summary>
        /// Returns the quantity of how many package units are contained inside the package
        /// </summary>
        /// <value>Returns the quantity of how many package units are contained inside the package</value>
        [DataMember(Name = "PackageQuantity", EmitDefaultValue = false)]
        public string PackageQuantity { get; set; }
        /// <summary>
        /// Returns the package type code; e.g. BX, CT, CA
        /// </summary>
        /// <value>Returns the package type code; e.g. BX, CT, CA</value>
        [DataMember(Name = "PackageTypeCode", EmitDefaultValue = false)]
        public string PackageTypeCode { get; set; }
        /// <summary>
        /// Returns the package type code description; e.g. Box, Carton, Case
        /// </summary>
        /// <value>Returns the package type code description; e.g. Box, Carton, Case</value>
        [DataMember(Name = "PackageTypeDesc", EmitDefaultValue = false)]
        public string PackageTypeDesc { get; set; }
        /// <summary>
        /// Returns the FDB package identifier of what is inside the package.  If the package contains a quantity of base level devices, this value is Null.
        /// </summary>
        /// <value>Returns the FDB package identifier of what is inside the package.  If the package contains a quantity of base level devices, this value is Null.</value>
        [DataMember(Name = "InnerPrizmPackageId", EmitDefaultValue = false)]
        public int? InnerPrizmPackageId { get; set; }
        /// <summary>
        /// Returns the innermost item (base level device) FDB device identifier
        /// </summary>
        /// <value>Returns the innermost item (base level device) FDB device identifier</value>
        [DataMember(Name = "BasePrizmId", EmitDefaultValue = false)]
        public int? BasePrizmId { get; set; }
        /// <summary>
        /// Returns package status identifier of the package.  Possible values are 1 – Live, 2 – Replaced, 3 - Retired
        /// </summary>
        /// <value>Returns package status identifier of the package.  Possible values are 1 – Live, 2 – Replaced, 3 - Retired</value>
        [DataMember(Name = "PackageStatusId", EmitDefaultValue = false)]
        public int? PackageStatusId { get; set; }
        /// <summary>
        /// Returns description of package status of the package.  This is the description of PackageStatusId field. The possible  values are &#39;Live&#39;, &#39;Replaced&#39;, &#39;Retired&#39;
        /// </summary>
        /// <value>Returns description of package status of the package.  This is the description of PackageStatusId field. The possible  values are &#39;Live&#39;, &#39;Replaced&#39;, &#39;Retired&#39;</value>
        [DataMember(Name = "PackageStatusDesc", EmitDefaultValue = false)]
        public string PackageStatusDesc { get; set; }
        /// <summary>
        /// Returns the external package identifier information for the package
        /// </summary>
        /// <value>Returns the external package identifier information for the package</value>
        [DataMember(Name = "PackageIdentifiers", EmitDefaultValue = false)]
        public List<PackageIdentifier> PackageIdentifiers { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PackageInfo {\n");
            sb.Append("  PrizmPackageId: ").Append(PrizmPackageId).Append("\n");
            sb.Append("  PackageQuantity: ").Append(PackageQuantity).Append("\n");
            sb.Append("  PackageTypeCode: ").Append(PackageTypeCode).Append("\n");
            sb.Append("  PackageTypeDesc: ").Append(PackageTypeDesc).Append("\n");
            sb.Append("  InnerPrizmPackageId: ").Append(InnerPrizmPackageId).Append("\n");
            sb.Append("  BasePrizmId: ").Append(BasePrizmId).Append("\n");
            sb.Append("  PackageStatusId: ").Append(PackageStatusId).Append("\n");
            sb.Append("  PackageStatusDesc: ").Append(PackageStatusDesc).Append("\n");
            sb.Append("  PackageIdentifiers: ").Append(PackageIdentifiers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PackageInfo);
        }

        /// <summary>
        /// Returns true if PackageInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of PackageInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PackageInfo other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return
                (
                    this.PrizmPackageId == other.PrizmPackageId ||
                    this.PrizmPackageId != null &&
                    this.PrizmPackageId.Equals(other.PrizmPackageId)
                ) &&
                (
                    this.PackageQuantity == other.PackageQuantity ||
                    this.PackageQuantity != null &&
                    this.PackageQuantity.Equals(other.PackageQuantity)
                ) &&
                (
                    this.PackageTypeCode == other.PackageTypeCode ||
                    this.PackageTypeCode != null &&
                    this.PackageTypeCode.Equals(other.PackageTypeCode)
                ) &&
                (
                    this.PackageTypeDesc == other.PackageTypeDesc ||
                    this.PackageTypeDesc != null &&
                    this.PackageTypeDesc.Equals(other.PackageTypeDesc)
                ) &&
                (
                    this.InnerPrizmPackageId == other.InnerPrizmPackageId ||
                    this.InnerPrizmPackageId != null &&
                    this.InnerPrizmPackageId.Equals(other.InnerPrizmPackageId)
                ) &&
                (
                    this.BasePrizmId == other.BasePrizmId ||
                    this.BasePrizmId != null &&
                    this.BasePrizmId.Equals(other.BasePrizmId)
                ) &&
                (
                    this.PackageStatusId == other.PackageStatusId ||
                    this.PackageStatusId != null &&
                    this.PackageStatusId.Equals(other.PackageStatusId)
                ) &&
                (
                    this.PackageStatusDesc == other.PackageStatusDesc ||
                    this.PackageStatusDesc != null &&
                    this.PackageStatusDesc.Equals(other.PackageStatusDesc)
                ) &&
                (
                    this.PackageIdentifiers == other.PackageIdentifiers ||
                    this.PackageIdentifiers != null &&
                    this.PackageIdentifiers.SequenceEqual(other.PackageIdentifiers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.PrizmPackageId != null)
                    hash = hash * 59 + this.PrizmPackageId.GetHashCode();
                if (this.PackageQuantity != null)
                    hash = hash * 59 + this.PackageQuantity.GetHashCode();
                if (this.PackageTypeCode != null)
                    hash = hash * 59 + this.PackageTypeCode.GetHashCode();
                if (this.PackageTypeDesc != null)
                    hash = hash * 59 + this.PackageTypeDesc.GetHashCode();
                if (this.InnerPrizmPackageId != null)
                    hash = hash * 59 + this.InnerPrizmPackageId.GetHashCode();
                if (this.BasePrizmId != null)
                    hash = hash * 59 + this.BasePrizmId.GetHashCode();
                if (this.PackageStatusId != null)
                    hash = hash * 59 + this.PackageStatusId.GetHashCode();
                if (this.PackageStatusDesc != null)
                    hash = hash * 59 + this.PackageStatusDesc.GetHashCode();
                if (this.PackageIdentifiers != null)
                    hash = hash * 59 + this.PackageIdentifiers.GetHashCode();
                return hash;
            }
        }
    }

}
