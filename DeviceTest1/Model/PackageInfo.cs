/* 
 * FDB Device Services
 *
 * Web API for accessing medical device information
 *
 * OpenAPI spec version: 1.01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace DeviceSample.Model
{
    /// <summary>
    /// Returns the package information of the device
    /// </summary>
    [DataContract]
    public partial class PackageInfo :  IEquatable<PackageInfo>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PackageInfo" /> class.
        /// </summary>
        /// <param name="PackageQuantity">Returns the package quantity.</param>
        /// <param name="PackageTypeCode">Returns the package type code.</param>
        /// <param name="PackageTypeDesc">Returns the package type code description.</param>
        public PackageInfo(string PackageQuantity = null, string PackageTypeCode = null, string PackageTypeDesc = null)
        {
            this.PackageQuantity = PackageQuantity;
            this.PackageTypeCode = PackageTypeCode;
            this.PackageTypeDesc = PackageTypeDesc;
        }
        
        /// <summary>
        /// Returns the package quantity
        /// </summary>
        /// <value>Returns the package quantity</value>
        [DataMember(Name="PackageQuantity", EmitDefaultValue=false)]
        public string PackageQuantity { get; set; }
        /// <summary>
        /// Returns the package type code
        /// </summary>
        /// <value>Returns the package type code</value>
        [DataMember(Name="PackageTypeCode", EmitDefaultValue=false)]
        public string PackageTypeCode { get; set; }
        /// <summary>
        /// Returns the package type code description
        /// </summary>
        /// <value>Returns the package type code description</value>
        [DataMember(Name="PackageTypeDesc", EmitDefaultValue=false)]
        public string PackageTypeDesc { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PackageInfo {\n");
            sb.Append("  PackageQuantity: ").Append(PackageQuantity).Append("\n");
            sb.Append("  PackageTypeCode: ").Append(PackageTypeCode).Append("\n");
            sb.Append("  PackageTypeDesc: ").Append(PackageTypeDesc).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PackageInfo);
        }

        /// <summary>
        /// Returns true if PackageInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of PackageInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PackageInfo other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.PackageQuantity == other.PackageQuantity ||
                    this.PackageQuantity != null &&
                    this.PackageQuantity.Equals(other.PackageQuantity)
                ) && 
                (
                    this.PackageTypeCode == other.PackageTypeCode ||
                    this.PackageTypeCode != null &&
                    this.PackageTypeCode.Equals(other.PackageTypeCode)
                ) && 
                (
                    this.PackageTypeDesc == other.PackageTypeDesc ||
                    this.PackageTypeDesc != null &&
                    this.PackageTypeDesc.Equals(other.PackageTypeDesc)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.PackageQuantity != null)
                    hash = hash * 59 + this.PackageQuantity.GetHashCode();
                if (this.PackageTypeCode != null)
                    hash = hash * 59 + this.PackageTypeCode.GetHashCode();
                if (this.PackageTypeDesc != null)
                    hash = hash * 59 + this.PackageTypeDesc.GetHashCode();
                return hash;
            }
        }
    }

}
