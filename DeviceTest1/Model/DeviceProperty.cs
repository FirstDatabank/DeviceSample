/* 
 * FDB Prizm Services
 *
 * Web API for accessing medical device information
 *
 * OpenAPI spec version: 1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace DeviceSample.Model
{
    /// <summary>
    /// DeviceProperty
    /// </summary>
    [DataContract]
    public partial class DeviceProperty :  IEquatable<DeviceProperty>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceProperty" /> class.
        /// </summary>
        /// <param name="PropertyId">PropertyId.</param>
        /// <param name="PropertyName">PropertyName.</param>
        /// <param name="PropertyValue">PropertyValue.</param>
        /// <param name="SequenceNumber">SequenceNumber.</param>
        public DeviceProperty(string PropertyId = default(string), string PropertyName = default(string), string PropertyValue = default(string), string SequenceNumber = default(string))
        {
            this.PropertyId = PropertyId;
            this.PropertyName = PropertyName;
            this.PropertyValue = PropertyValue;
            this.SequenceNumber = SequenceNumber;
        }
        
        /// <summary>
        /// Gets or Sets PropertyId
        /// </summary>
        [DataMember(Name="PropertyId", EmitDefaultValue=false)]
        public string PropertyId { get; set; }

        /// <summary>
        /// Gets or Sets PropertyName
        /// </summary>
        [DataMember(Name="PropertyName", EmitDefaultValue=false)]
        public string PropertyName { get; set; }

        /// <summary>
        /// Gets or Sets PropertyValue
        /// </summary>
        [DataMember(Name="PropertyValue", EmitDefaultValue=false)]
        public string PropertyValue { get; set; }

        /// <summary>
        /// Gets or Sets SequenceNumber
        /// </summary>
        [DataMember(Name="SequenceNumber", EmitDefaultValue=false)]
        public string SequenceNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DeviceProperty {\n");
            sb.Append("  PropertyId: ").Append(PropertyId).Append("\n");
            sb.Append("  PropertyName: ").Append(PropertyName).Append("\n");
            sb.Append("  PropertyValue: ").Append(PropertyValue).Append("\n");
            sb.Append("  SequenceNumber: ").Append(SequenceNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DeviceProperty);
        }

        /// <summary>
        /// Returns true if DeviceProperty instances are equal
        /// </summary>
        /// <param name="other">Instance of DeviceProperty to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeviceProperty other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.PropertyId == other.PropertyId ||
                    this.PropertyId != null &&
                    this.PropertyId.Equals(other.PropertyId)
                ) && 
                (
                    this.PropertyName == other.PropertyName ||
                    this.PropertyName != null &&
                    this.PropertyName.Equals(other.PropertyName)
                ) && 
                (
                    this.PropertyValue == other.PropertyValue ||
                    this.PropertyValue != null &&
                    this.PropertyValue.Equals(other.PropertyValue)
                ) && 
                (
                    this.SequenceNumber == other.SequenceNumber ||
                    this.SequenceNumber != null &&
                    this.SequenceNumber.Equals(other.SequenceNumber)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.PropertyId != null)
                    hash = hash * 59 + this.PropertyId.GetHashCode();
                if (this.PropertyName != null)
                    hash = hash * 59 + this.PropertyName.GetHashCode();
                if (this.PropertyValue != null)
                    hash = hash * 59 + this.PropertyValue.GetHashCode();
                if (this.SequenceNumber != null)
                    hash = hash * 59 + this.SequenceNumber.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
