/* 
 * FDB Device Services
 *
 * Web API for accessing medical device information
 *
 * OpenAPI spec version: 1.04
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace DeviceSample.Model
{
    /// <summary>
    /// Returns Device Propert Information
    /// </summary>
    [DataContract]
    public partial class DeviceProperty : IEquatable<DeviceProperty>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceProperty" /> class.
        /// </summary>
        /// <param name="PropertyId">Returns the Property identifier.</param>
        /// <param name="PropertyName">Returns the Property Name.</param>
        /// <param name="PropertyValue">Returns the Property Value.</param>
        /// <param name="SequenceNumber">Returns the Sequence Number.</param>
        public DeviceProperty(string PropertyId = null, string PropertyName = null, string PropertyValue = null, string SequenceNumber = null)
        {
            this.PropertyId = PropertyId;
            this.PropertyName = PropertyName;
            this.PropertyValue = PropertyValue;
            this.SequenceNumber = SequenceNumber;
        }

        /// <summary>
        /// Returns the Property identifier
        /// </summary>
        /// <value>Returns the Property identifier</value>
        [DataMember(Name = "PropertyId", EmitDefaultValue = false)]
        public string PropertyId { get; set; }
        /// <summary>
        /// Returns the Property Name
        /// </summary>
        /// <value>Returns the Property Name</value>
        [DataMember(Name = "PropertyName", EmitDefaultValue = false)]
        public string PropertyName { get; set; }
        /// <summary>
        /// Returns the Property Value
        /// </summary>
        /// <value>Returns the Property Value</value>
        [DataMember(Name = "PropertyValue", EmitDefaultValue = false)]
        public string PropertyValue { get; set; }
        /// <summary>
        /// Returns the Sequence Number
        /// </summary>
        /// <value>Returns the Sequence Number</value>
        [DataMember(Name = "SequenceNumber", EmitDefaultValue = false)]
        public string SequenceNumber { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DeviceProperty {\n");
            sb.Append("  PropertyId: ").Append(PropertyId).Append("\n");
            sb.Append("  PropertyName: ").Append(PropertyName).Append("\n");
            sb.Append("  PropertyValue: ").Append(PropertyValue).Append("\n");
            sb.Append("  SequenceNumber: ").Append(SequenceNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DeviceProperty);
        }

        /// <summary>
        /// Returns true if DeviceProperty instances are equal
        /// </summary>
        /// <param name="other">Instance of DeviceProperty to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeviceProperty other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return
                (
                    this.PropertyId == other.PropertyId ||
                    this.PropertyId != null &&
                    this.PropertyId.Equals(other.PropertyId)
                ) &&
                (
                    this.PropertyName == other.PropertyName ||
                    this.PropertyName != null &&
                    this.PropertyName.Equals(other.PropertyName)
                ) &&
                (
                    this.PropertyValue == other.PropertyValue ||
                    this.PropertyValue != null &&
                    this.PropertyValue.Equals(other.PropertyValue)
                ) &&
                (
                    this.SequenceNumber == other.SequenceNumber ||
                    this.SequenceNumber != null &&
                    this.SequenceNumber.Equals(other.SequenceNumber)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.PropertyId != null)
                    hash = hash * 59 + this.PropertyId.GetHashCode();
                if (this.PropertyName != null)
                    hash = hash * 59 + this.PropertyName.GetHashCode();
                if (this.PropertyValue != null)
                    hash = hash * 59 + this.PropertyValue.GetHashCode();
                if (this.SequenceNumber != null)
                    hash = hash * 59 + this.SequenceNumber.GetHashCode();
                return hash;
            }
        }

    }

}
