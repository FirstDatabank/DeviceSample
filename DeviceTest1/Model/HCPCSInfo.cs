/*
 * FDB Device Services
 *
 * Web API for accessing medical device information
 *
 * OpenAPI spec version: 1.05
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Runtime.Serialization;
using System.Text;

namespace DeviceSample.Model
{
    /// <summary>
    /// HCPCSInfo
    /// </summary>
    [DataContract]
    public partial class HCPCSInfo : IEquatable<HCPCSInfo>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HCPCSInfo" /> class.
        /// </summary>
        /// <param name="HCPCSCode">HCPCSCode.</param>
        /// <param name="HCPCSDescriptionLong">HCPCSDescriptionLong.</param>
        /// <param name="HCPCSAddDate">HCPCSAddDate.</param>
        /// <param name="HCPCSTerminationDate">HCPCSTerminationDate.</param>
        public HCPCSInfo(string HCPCSCode = default(string), string HCPCSDescriptionLong = default(string), string HCPCSAddDate = default(string), string HCPCSTerminationDate = default(string))
        {
            this.HCPCSCode = HCPCSCode;
            this.HCPCSDescriptionLong = HCPCSDescriptionLong;
            this.HCPCSAddDate = HCPCSAddDate;
            this.HCPCSTerminationDate = HCPCSTerminationDate;
        }

        /// <summary>
        /// Gets or Sets HCPCSCode
        /// </summary>
        [DataMember(Name = "HCPCSCode", EmitDefaultValue = false)]
        public string HCPCSCode { get; set; }

        /// <summary>
        /// Gets or Sets HCPCSDescriptionLong
        /// </summary>
        [DataMember(Name = "HCPCSDescriptionLong", EmitDefaultValue = false)]
        public string HCPCSDescriptionLong { get; set; }

        /// <summary>
        /// Gets or Sets HCPCSAddDate
        /// </summary>
        [DataMember(Name = "HCPCSAddDate", EmitDefaultValue = false)]
        public string HCPCSAddDate { get; set; }

        /// <summary>
        /// Gets or Sets HCPCSTerminationDate
        /// </summary>
        [DataMember(Name = "HCPCSTerminationDate", EmitDefaultValue = false)]
        public string HCPCSTerminationDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HCPCSInfo {\n");
            sb.Append("  HCPCSCode: ").Append(HCPCSCode).Append("\n");
            sb.Append("  HCPCSDescriptionLong: ").Append(HCPCSDescriptionLong).Append("\n");
            sb.Append("  HCPCSAddDate: ").Append(HCPCSAddDate).Append("\n");
            sb.Append("  HCPCSTerminationDate: ").Append(HCPCSTerminationDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as HCPCSInfo);
        }

        /// <summary>
        /// Returns true if HCPCSInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of HCPCSInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HCPCSInfo other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return
                (
                    this.HCPCSCode == other.HCPCSCode ||
                    this.HCPCSCode != null &&
                    this.HCPCSCode.Equals(other.HCPCSCode)
                ) &&
                (
                    this.HCPCSDescriptionLong == other.HCPCSDescriptionLong ||
                    this.HCPCSDescriptionLong != null &&
                    this.HCPCSDescriptionLong.Equals(other.HCPCSDescriptionLong)
                ) &&
                (
                    this.HCPCSAddDate == other.HCPCSAddDate ||
                    this.HCPCSAddDate != null &&
                    this.HCPCSAddDate.Equals(other.HCPCSAddDate)
                ) &&
                (
                    this.HCPCSTerminationDate == other.HCPCSTerminationDate ||
                    this.HCPCSTerminationDate != null &&
                    this.HCPCSTerminationDate.Equals(other.HCPCSTerminationDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.HCPCSCode != null)
                    hash = hash * 59 + this.HCPCSCode.GetHashCode();
                if (this.HCPCSDescriptionLong != null)
                    hash = hash * 59 + this.HCPCSDescriptionLong.GetHashCode();
                if (this.HCPCSAddDate != null)
                    hash = hash * 59 + this.HCPCSAddDate.GetHashCode();
                if (this.HCPCSTerminationDate != null)
                    hash = hash * 59 + this.HCPCSTerminationDate.GetHashCode();
                return hash;
            }
        }
    }
}